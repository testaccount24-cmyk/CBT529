       IDENTIFICATION DIVISION.
       PROGRAM-ID. CATLIST.
       AUTHOR. MATTHEW V. STITT.
       DATE-WRITTEN. 02/15/87.
       DATE-COMPILED.
       REMARKS.  PRINT CONDENSED VSAM CATALOG LISTING FOR DOS/VSE,
                 VSE/SP, VSE/ESA MASTER AND USER CATALOGS.  THIS
                 PROGRAM USES STANDARD VSAM ACCESS USING THE CATALOG
                 AS A DATA FILE.  THE CATALOG IS REFERENCED WITH THE
                 UCFILE DLBL WITH A CATALOG PARAMETER REFERENCING BACK
                 TO THE USER CATALOG DLBL IN THE LABEL AREA.
       EJECT
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           C01 IS TOP-PAGE.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT FILE-ONE ASSIGN TO SYS099-UCFILE
               ORGANIZATION IS INDEXED
               ACCESS MODE IS DYNAMIC
               RECORD KEY IS FILE-NAME
               FILE STATUS IS VSAM-BYTE.
           SELECT PRINT-FILE ASSIGN TO SYS007-UR-1403-S.
       EJECT
       DATA DIVISION.
       FILE SECTION.
       SKIP1
      *****************************************************************
      *  VSAM CATALOG BASIC RECORD DEFINITION.  THE RECORDS WHICH     *
      *  CONTAIN THE CATALOG INFORMATION ARE 512 CHARACTERS IN LENGTH *
      *  WHILE THE ENTRY NAME RECORDS ARE 47 CHARACTERS IN LENGTH.    *
      *****************************************************************
       FD  FILE-ONE
           LABEL RECORDS ARE STANDARD.
       01  RECORD-ONE.
           02  FILE-NAME               PIC X(44).
           02  RECORD-NUMBER           PIC X(3).
           02  RECORD-CODES        REDEFINES RECORD-NUMBER.
               03  RECORD-CODE         PIC X.
               03  RECORD-DATA-LEN     PIC XX.
           02  RECORD-FLD-VAR          PIC X.
           02  RECORD-FIX-LEN          PIC X.
           02  RECORD-ENT-NAME         PIC X(44).
           02  FILLER                  PIC X(412).
       SKIP1
      *****************************************************************
      *  PRINTED REPORT DEFINITION                                    *
      *****************************************************************
       FD  PRINT-FILE
           RECORDING MODE IS F
           LABEL RECORDS ARE OMITTED.
       01  PRINT-LINE                  PIC X(136).
       EJECT
       WORKING-STORAGE SECTION.
      *****************************************************************
      *  BEGINNING OF THE DATA AREAS LAYOUT                           *
      *****************************************************************
       77  WS-START                    PIC X(36) VALUE
           'CATLIST WORKING STORAGE STARTS HERE'.
       SKIP1
      *****************************************************************
      *  CONSTANT FIELDS WHICH DEFINE THE DATE AND TIME CONVERSION    *
      *  UNITS.  DUE TO COBOL SIZE RESTRICTIONS THESE CONSTANTS HAVE  *
      *  BEEN REDUCED TO SEVEN BYTES IN LENGTH BY DROPPING THE LAST   *
      *  BYTE (WHICH IS ZERO ANYWAY).  EACH CONSTANT REPRESENTS THE   *
      *  NUMBER OF MICROSECONDS FOR EACH TIME UNIT.                   *
      *****************************************************************
       77  TIME-4-YEARS                PIC 9(18)  COMP
                                             VALUE 2019686400000000.
      *                                    VALUE 517039718400000000.
       77  TIME-4-YEAR                 PIC 9(18)  COMP
                                             VALUE 2018304000000000.
      *                                    VALUE 516685824000000000.
       77  TIME-1-YEARS                PIC 9(18)  COMP
                                              VALUE 505958400000000.
      *                                     VALUE 13271040000000000.
       77  TIME-1-YEAR                 PIC 9(18)  COMP
                                              VALUE 504576000000000.
      *                                     VALUE 12917145600000000.
       77  TIME-1-DAY                  PIC 9(18)  COMP
                                                VALUE 1382400000000.
      *                                       VALUE 353894400000000.
       77  TIME-1-HOUR                 PIC 9(18)  COMP
                                                  VALUE 57600000000.
      *                                         VALUE 1474560000000.
       77  TIME-1-MIN                  PIC 9(18)  COMP
                                                    VALUE 960000000.
      *                                           VALUE 24576000000.
       77  TIME-1-SEC                  PIC 9(18)  COMP
                                                     VALUE 16000000.
      *                                            VALUE 4096000000.
       77  TIME-1-MILLISEC             PIC 9(18)  COMP
                                                        VALUE 16000.
      *                                               VALUE 4096000.
       77  TIME-1-MICROSEC             PIC 9(18)  COMP
                                                           VALUE 16.
      *                                                  VALUE 4096.
       SKIP1
      *****************************************************************
      *  GENERAL WORK FIELDS AND ACCUMULATORS                         *
      *****************************************************************
       77  SET-ZERO                    PIC S9(4) COMP  VALUE ZERO.
       77  WORK-CHAR                   PIC X.
       77  PRINT-NUMBER                PIC 9(7).
       77  EXT-CI                      PIC XXX.
       77  EXT-REC-NO                  PIC XXX.
       77  EXT-CI-REC                  PIC XXX.
       77  VSAM-BYTE                   PIC XX.
       77  TS-YEAR                     PIC 9999.
       77  TS-DAY                      PIC 999.
       77  TS-HOUR                     PIC 99.
       77  TS-MIN                      PIC 99.
       77  TS-SEC                      PIC 99.
       77  FULL-PCT                    PIC S9(5)  COMP-3  VALUE ZERO.
       77  PCT-FULL                REDEFINES FULL-PCT
                                       PIC S9(3)V99  COMP-3.
       77  WORK-BIT-EXPAND             PIC S9(5)  COMP-3  VALUE ZERO.
       77  G-O-NO-VAR-FLD              PIC S9(5)  COMP-3  VALUE ZERO.
       77  G-O-LEN                     PIC S9(5)  COMP-3  VALUE ZERO.
       77  GOP-TYPE-EXT                PIC S9(5)  COMP-3  VALUE ZERO.
       77  GOP-TYPE-VOL-EXT            PIC S9(5)  COMP-3  VALUE ZERO.
       77  G-O-SEQ-EXT                 PIC S9(5)  COMP-3  VALUE ZERO.
       77  G-O-SEQ-VOL-EXT             PIC S9(5)  COMP-3  VALUE ZERO.
       77  LKEY-LEN                    PIC S9(5)  COMP-3  VALUE ZERO.
       77  HKEY-LEN                    PIC S9(5)  COMP-3  VALUE ZERO.
       77  EXTENT-LEN                  PIC S9(5)  COMP-3  VALUE ZERO.
       77  PASSWORD-LEN                PIC S9(5)  COMP-3  VALUE ZERO.
       77  VOL-NO-TRK                  PIC S9(5)  COMP-3  VALUE ZERO.
       77  DS-NO-TRK                   PIC S9(5)  COMP-3  VALUE ZERO.
       77  VOL-NO-EXTNT                PIC S9(5)  COMP-3  VALUE ZERO.
       77  DS-NO-EXTNT                 PIC S9(5)  COMP-3  VALUE ZERO.
       77  DS-NO-ENT                   PIC S9(5)  COMP-3  VALUE ZERO.
       77  DS-NO-ENT-TRK               PIC S9(5)  COMP-3  VALUE ZERO.
       77  PAGE-CTR                    PIC S9(5)  COMP-3  VALUE ZERO.
       77  LINE-CTR                    PIC S9(5)  COMP-3  VALUE ZERO.
       77  MAX-LINE                    PIC S9(5)  COMP-3  VALUE 55.
       77  X                           PIC S9(5)  COMP-3  VALUE ZERO.
       77  Y                           PIC S9(5)  COMP-3  VALUE ZERO.
       77  Z                           PIC S9(5)  COMP-3  VALUE ZERO.
       SKIP1
      *****************************************************************
      *  GROUP OCCURENCE TYPE FIELD AND ITS HOLDING AREAS             *
      *****************************************************************
       77  GOP-TYPE                    PIC S9(5)  COMP-3  VALUE ZERO.
       77  GOP-TYPE-1                  PIC S9(5)  COMP-3  VALUE ZERO.
       77  GOP-TYPE-2                  PIC S9(5)  COMP-3  VALUE ZERO.
       77  GOP-TYPE-3                  PIC S9(5)  COMP-3  VALUE ZERO.
       77  GOP-TYPE-4                  PIC S9(5)  COMP-3  VALUE ZERO.
       SKIP1
      *****************************************************************
      *  FIXED RECORD LENGTH AND ITS HOLDING AREAS                    *
      *****************************************************************
       77  FIX-REC-LEN                 PIC S9(5)  COMP-3  VALUE ZERO.
       77  FIX-REC-LEN-1               PIC S9(5)  COMP-3  VALUE ZERO.
       77  FIX-REC-LEN-2               PIC S9(5)  COMP-3  VALUE ZERO.
       77  FIX-REC-LEN-3               PIC S9(5)  COMP-3  VALUE ZERO.
       77  FIX-REC-LEN-4               PIC S9(5)  COMP-3  VALUE ZERO.
       SKIP1
      *****************************************************************
      *  MAXIMUM RECORD LENGTH FIELD AND ITS HOLDING AREAS            *
      *****************************************************************
       77  MAX-REC-LEN                 PIC S9(5)  COMP-3  VALUE ZERO.
       77  MAX-REC-LEN-1               PIC S9(5)  COMP-3  VALUE ZERO.
       77  MAX-REC-LEN-2               PIC S9(5)  COMP-3  VALUE ZERO.
       77  MAX-REC-LEN-3               PIC S9(5)  COMP-3  VALUE ZERO.
       77  MAX-REC-LEN-4               PIC S9(5)  COMP-3  VALUE ZERO.
       SKIP1
      *****************************************************************
      *  NUMBER OF GROUP OCCURENCE POINTERS AND ITS HOLDING AREAS     *
      *****************************************************************
       77  GOP-VAR-NO                  PIC S9(5)  COMP-3  VALUE ZERO.
       77  GOP-VAR-NO-1                PIC S9(5)  COMP-3  VALUE ZERO.
       77  GOP-VAR-NO-2                PIC S9(5)  COMP-3  VALUE ZERO.
       77  GOP-VAR-NO-3                PIC S9(5)  COMP-3  VALUE ZERO.
       77  GOP-VAR-NO-4                PIC S9(5)  COMP-3  VALUE ZERO.
       SKIP1
      *****************************************************************
      *  STARTING LOCATION OF GROUP OCCURENCE POINTERS AND ITS        *
      *  HOLDING AREAS                                                *
      *****************************************************************
       77  G-O-START                   PIC S9(5)  COMP-3  VALUE ZERO.
       77  G-O-START-1                 PIC S9(5)  COMP-3  VALUE ZERO.
       77  G-O-START-2                 PIC S9(5)  COMP-3  VALUE ZERO.
       77  G-O-START-3                 PIC S9(5)  COMP-3  VALUE ZERO.
       77  G-O-START-4                 PIC S9(5)  COMP-3  VALUE ZERO.
       SKIP1
      *****************************************************************
      *  GROUP OCCURENCE SEQUENCE NUMBER AND ITS HOLDING AREAS        *
      *****************************************************************
       77  G-O-SEQ                     PIC S9(5)  COMP-3  VALUE ZERO.
       77  G-O-SEQ-1                   PIC S9(5)  COMP-3  VALUE ZERO.
       77  G-O-SEQ-2                   PIC S9(5)  COMP-3  VALUE ZERO.
       77  G-O-SEQ-3                   PIC S9(5)  COMP-3  VALUE ZERO.
       77  G-O-SEQ-4                   PIC S9(5)  COMP-3  VALUE ZERO.
       SKIP1
      *****************************************************************
      *  RECORD TYPE FIELD AND ITS HOLDING AREAS                      *
      *****************************************************************
       77  REC-TYPE                    PIC X.
       77  REC-TYPE-1                  PIC X.
       77  REC-TYPE-2                  PIC X.
       77  REC-TYPE-3                  PIC X.
       77  REC-TYPE-4                  PIC X.
       SKIP1
      *****************************************************************
      *  WORK ARRAY INDEX POINTER HOLDING AREAS                       *
      *****************************************************************
       77  HOLD-INDEX                  PIC 9(4)  COMP.
       77  HOLD-INDEX-1                PIC 9(4)  COMP.
       77  HOLD-INDEX-2                PIC 9(4)  COMP.
       77  HOLD-INDEX-3                PIC 9(4)  COMP.
       77  HOLD-INDEX-4                PIC 9(4)  COMP.
       SKIP1
      *****************************************************************
      *  POINTER FOR EXTENSION RECORDS AND ITS HOLDING AREAS          *
      *****************************************************************
       77  EXT-REC-PTR                 PIC X(5).
       77  EXT-REC-PTR-1               PIC X(5).
       77  EXT-REC-PTR-2               PIC X(5).
       77  EXT-REC-PTR-3               PIC X(5).
       77  EXT-REC-PTR-4               PIC X(5).
      *****************************************************************
      *  DATE AND TIME WORK FIELDS                                    *
      *****************************************************************
       01  DATE-TIME.
           02  DT-YEAR                 PIC X(4) VALUE SPACE.
           02  DT-MONTH                PIC X(2) VALUE SPACE.
           02  DT-DAY                  PIC X(2) VALUE SPACE.
           02  DT-HOUR                 PIC X(2) VALUE SPACE.
           02  DT-MINUTE               PIC X(2) VALUE SPACE.
           02  DT-SECOND               PIC X(2) VALUE SPACE.
           02  DT-MILL-SEC             PIC X(2) VALUE SPACE.
       EJECT
      *****************************************************************
      *  REPORT HEADING LINES                                         *
      *****************************************************************
       01  HEAD-LINE-0.
           02  FILLER                  PIC X(5) VALUE SPACE.
           02  FILLER                  PIC X(5) VALUE 'DATE'.
           02  H-DATE.
               03  H-MIN               PIC X(2) VALUE SPACE.
               03  FILLER              PIC X(1) VALUE '/'.
               03  H-DAY               PIC X(2) VALUE SPACE.
               03  FILLER              PIC X(1) VALUE '/'.
               03  H-YEAR              PIC X(4) VALUE SPACE.
           02  FILLER                  PIC X(7) VALUE '  TIME'.
           02  H-TIME.
               03  H-HH                PIC X(2) VALUE SPACE.
               03  FILLER              PIC X(1) VALUE ':'.
               03  H-MM                PIC X(2) VALUE SPACE.
               03  FILLER              PIC X(1) VALUE ':'.
               03  H-SS                PIC X(2) VALUE SPACE.
           02  FILLER                  PIC X(10) VALUE SPACE.
           02  FILLER                  PIC X(21) VALUE
               'LISTING FROM CATALOG '.
           02  H-USER-CAT              PIC X(44) VALUE SPACE.
           02  FILLER                  PIC X(10) VALUE SPACE.
           02  FILLER                  PIC X(5) VALUE 'PAGE'.
           02  H-PAGE                  PIC ZZ9 VALUE ZERO.
       SKIP1
       01  HEAD-LINE-1.
           02  FILLER                  PIC X(1) VALUE SPACE.
           02  FILLER                  PIC X(5) VALUE 'ENTRY'.
           02  FILLER                  PIC X(2) VALUE SPACE.
           02  FILLER                  PIC X(7) VALUE SPACE.
           02  FILLER                  PIC X(10) VALUE 'ALLOCATION'.
           02  FILLER                  PIC X(3) VALUE SPACE.
           02  FILLER                  PIC X(3) VALUE 'NUM'.
           02  FILLER                  PIC X(1) VALUE SPACE.
           02  FILLER                  PIC X(5) VALUE 'ALLOC'.
           02  FILLER                  PIC X(1) VALUE SPACE.
           02  FILLER                  PIC X(3) VALUE 'PCT'.
           02  FILLER                  PIC X(1) VALUE SPACE.
           02  FILLER                  PIC X(3) VALUE 'SPC'.
           02  FILLER                  PIC X(1) VALUE SPACE.
           02  FILLER                  PIC X(3) VALUE 'ENT'.
           02  FILLER                  PIC X(4) VALUE SPACE.
           02  FILLER                  PIC X(4) VALUE 'DATE'.
           02  FILLER                  PIC X(7) VALUE SPACE.
           02  FILLER                  PIC X(4) VALUE 'DATE'.
           02  FILLER                  PIC X(7) VALUE SPACE.
           02  FILLER                  PIC X(3) VALUE 'NUM'.
           02  FILLER                  PIC X(5) VALUE SPACE.
           02  FILLER                  PIC X(8) VALUE 'REC SIZE'.
           02  FILLER                  PIC X(4) VALUE SPACE.
           02  FILLER                  PIC X(2) VALUE 'CI'.
           02  FILLER                  PIC X(2) VALUE SPACE.
           02  FILLER                  PIC X(3) VALUE 'KEY'.
           02  FILLER                  PIC X(2) VALUE SPACE.
           02  FILLER                  PIC X(3) VALUE 'KEY'.
           02  FILLER                  PIC X(2) VALUE SPACE.
           02  FILLER                  PIC X(6) VALUE 'SPLITS'.
           02  FILLER                  PIC X(1) VALUE SPACE.
           02  FILLER                  PIC X(3) VALUE 'SHR'.
           02  FILLER                  PIC X(2) VALUE SPACE.
           02  FILLER                  PIC X(4) VALUE 'FSPC'.
           02  FILLER                  PIC X(3) VALUE SPACE.
           02  FILLER                  PIC X(4) VALUE 'DATE'.
       SKIP1
       01  HEAD-LINE-2.
           02  FILLER                  PIC X(1) VALUE SPACE.
           02  FILLER                  PIC X(4) VALUE 'NAME'.
           02  FILLER                  PIC X(1) VALUE SPACE.
           02  FILLER                  PIC X(6) VALUE 'VOLUME'.
           02  FILLER                  PIC X(1) VALUE SPACE.
           02  FILLER                  PIC X(4) VALUE 'TYPE'.
           02  FILLER                  PIC X(2) VALUE SPACE.
           02  FILLER                  PIC X(3) VALUE 'PRM'.
           02  FILLER                  PIC X(2) VALUE SPACE.
           02  FILLER                  PIC X(3) VALUE 'SEC'.
           02  FILLER                  PIC X(1) VALUE SPACE.
           02  FILLER                  PIC X(3) VALUE 'EXT'.
           02  FILLER                  PIC X(1) VALUE SPACE.
           02  FILLER                  PIC X(5) VALUE 'TRACK'.
           02  FILLER                  PIC X(1) VALUE SPACE.
           02  FILLER                  PIC X(3) VALUE 'USD'.
           02  FILLER                  PIC X(1) VALUE SPACE.
           02  FILLER                  PIC X(3) VALUE 'CLS'.
           02  FILLER                  PIC X(1) VALUE SPACE.
           02  FILLER                  PIC X(4) VALUE 'TYPE'.
           02  FILLER                  PIC X(2) VALUE SPACE.
           02  FILLER                  PIC X(7) VALUE 'CREATED'.
           02  FILLER                  PIC X(4) VALUE SPACE.
           02  FILLER                  PIC X(7) VALUE 'EXPIRED'.
           02  FILLER                  PIC X(5) VALUE SPACE.
           02  FILLER                  PIC X(5) VALUE 'RECDS'.
           02  FILLER                  PIC X(3) VALUE SPACE.
           02  FILLER                  PIC X(3) VALUE 'AVG'.
           02  FILLER                  PIC X(3) VALUE SPACE.
           02  FILLER                  PIC X(3) VALUE 'MAX'.
           02  FILLER                  PIC X(2) VALUE SPACE.
           02  FILLER                  PIC X(4) VALUE 'SIZE'.
           02  FILLER                  PIC X(1) VALUE SPACE.
           02  FILLER                  PIC X(3) VALUE 'LEN'.
           02  FILLER                  PIC X(2) VALUE SPACE.
           02  FILLER                  PIC X(3) VALUE 'POS'.
           02  FILLER                  PIC X(2) VALUE SPACE.
           02  FILLER                  PIC X(2) VALUE 'CI'.
           02  FILLER                  PIC X(2) VALUE SPACE.
           02  FILLER                  PIC X(2) VALUE 'CA'.
           02  FILLER                  PIC X(1) VALUE SPACE.
           02  FILLER                  PIC X(3) VALUE 'OPT'.
           02  FILLER                  PIC X(1) VALUE SPACE.
           02  FILLER                  PIC X(2) VALUE 'CI'.
           02  FILLER                  PIC X(1) VALUE SPACE.
           02  FILLER                  PIC X(2) VALUE 'CA'.
           02  FILLER                  PIC X(2) VALUE SPACE.
           02  FILLER                  PIC X(6) VALUE 'ACCESS'.
       EJECT
      *****************************************************************
      *  REPORT DETAIL PRINT LINES                                    *
      *****************************************************************
       01  DETAIL-LINE-1.
           02  DETAIL-LINE-1-SUB-1.
               03  FILLER              PIC X(1).
               03  D-ENT-NAME          PIC X(44).
               03  FILLER              PIC X(1).
           02  DETAIL-LINE-1-SUB-2.
               03  D-ENT-TYPE-1        PIC X(3).
               03  FILLER              PIC X(2).
               03  D-CRE-DATE-1        PIC X(10).
               03  FILLER              PIC X(1).
               03  D-EXP-DATE-1        PIC X(10).
           02  DETAIL-LINE-1-SUB-3.
               03  FILLER              PIC X(64).
       SKIP1
       01  DETAIL-LINE-2.
           02  DETAIL-LINE-2-SUB-1.
               03  FILLER              PIC X(6).
               03  D-ENT-VOL           PIC X(6).
               03  FILLER              PIC X(1).
               03  D-ALLOC-TYPE        PIC X(3).
               03  FILLER              PIC X(1).
               03  D-PR-ALLOC          PIC ZZZZ9.
               03  D-SEC-ALLOC         PIC ZZZZ9.
               03  FILLER              PIC X(1).
               03  D-NUM-EXT           PIC ZZ9.
               03  FILLER              PIC X(1).
               03  D-NUM-TRK           PIC ZZZZ9.
               03  FILLER              PIC X(1).
               03  D-PCT-FULL          PIC ZZ9.
               03  FILLER              PIC X(2).
               03  D-SPC-CLS           PIC 9.
               03  FILLER              PIC X(2).
           02  DETAIL-LINE-2-SUB-2.
               03  D-ENT-TYPE-2        PIC X(3).
               03  FILLER              PIC X(2).
               03  D-CRE-DATE-2        PIC X(10).
               03  FILLER              PIC X(1).
               03  D-EXP-DATE-2        PIC X(10).
           02  DETAIL-LINE-2-SUB-3.
               03  D-NUM-REC           PIC ZZZZZZZ9.
               03  D-AVG-SIZE          PIC ZZZZZ9.
               03  D-MAX-SIZE          PIC ZZZZZ9.
               03  FILLER              PIC X(1).
               03  D-CI-SIZE           PIC ZZZZ9.
               03  FILLER              PIC X(1).
               03  D-KEY-LEN           PIC ZZ9.
               03  D-KEY-POS           PIC ZZZZ9.
               03  D-CI-SPLIT          PIC ZZZ9.
               03  D-CA-SPLIT          PIC ZZZ9.
               03  FILLER              PIC X(1).
               03  D-CR-SHR            PIC 9.
               03  FILLER              PIC X(1).
               03  D-CS-SHR            PIC 9.
               03  FILLER              PIC X(1).
               03  D-CI-FSPC           PIC Z9.
               03  FILLER              PIC X(1).
               03  D-CA-FSPC           PIC Z9.
               03  FILLER              PIC X(1).
               03  D-LST-ACC-DATE      PIC X(10).
       EJECT
      *****************************************************************
      *  FIXED LAYOUT FOR THE NON-VSAM CATALOG DESCRIPTOR RECORD      *
      *****************************************************************
       01  NON-VSAM-RECORD.
           02  NON-VSAM-CI-NO          PIC X(4).
           02  NON-VSAM-REL            PIC X(1).
           02  NON-VSAM-CRA-VOL        PIC X(6).
           02  NON-VSAM-CRA-CI         PIC X(3).
           02  NON-VSAM-CRA-DEVT       PIC X(4).
           02  FILLER                  PIC X(26).
           02  NON-VSAM-REC-CODE       PIC X(1).
           02  NON-VSAM-DATA-LEN       PIC X(2).
           02  NON-VSAM-FLD-VAR        PIC X(1).
           02  NON-VSAM-FIX-LEN        PIC X(1).
           02  NON-VSAM-ENTRY-NAME     PIC X(44).
           02  NON-VSAM-EXT-PTR        PIC X(5).
           02  NON-VSAM-GRP-PTR-NO     PIC X(1).
       EJECT
      *****************************************************************
      *  FIXED LAYOUT FOR THE CLUSTER CATALOG DESCRIPTOR RECORD       *
      *****************************************************************
       01  CLUSTER-RECORD.
           02  CLUSTER-CI-NO           PIC X(4).
           02  CLUSTER-REL             PIC X(1).
           02  CLUSTER-CRA-VOL         PIC X(6).
           02  CLUSTER-CRA-CI          PIC X(3).
           02  CLUSTER-CRA-DEVT        PIC X(4).
           02  FILLER                  PIC X(26).
           02  CLUSTER-REC-CODE        PIC X(1).
           02  CLUSTER-DATA-LEN        PIC X(2).
           02  CLUSTER-FLD-VAR         PIC X(1).
           02  CLUSTER-FIX-LEN         PIC X(1).
           02  CLUSTER-ENTRY-NAME      PIC X(44).
           02  CLUSTER-OWNER           PIC X(8).
           02  CLUSTER-CRE-DATE        PIC 9(5)  COMP-3.
           02  CLUSTER-EXP-DATE        PIC 9(5)  COMP-3.
           02  CLUSTER-ATTR            PIC X(1).
           02  CLUSTER-EXT-PTR         PIC X(5).
           02  CLUSTER-GRP-PTR-NO      PIC X(1).
       EJECT
      *****************************************************************
      *  FIXED LAYOUT FOR THE DATA CATALOG DESCRIPTOR RECORD          *
      *****************************************************************
       01  DATA-RECORD.
           02  DATA-CI-NO              PIC X(4).
           02  DATA-REL                PIC X(1).
           02  DATA-CRA-VOL            PIC X(6).
           02  DATA-CRA-CI             PIC X(3).
           02  DATA-CRA-DEVT           PIC X(4).
           02  FILLER                  PIC X(26).
           02  DATA-REC-CODE           PIC X(1).
           02  DATA-DATA-LEN           PIC X(2).
           02  DATA-FLD-VAR            PIC X(1).
           02  DATA-FIX-LEN            PIC X(1).
           02  DATA-ENTRY-NAME         PIC X(44).
           02  DATA-OWNER              PIC X(8).
           02  DATA-CRE-DATE           PIC 9(5)  COMP-3.
           02  DATA-EXP-DATE           PIC 9(5)  COMP-3.
           02  DATA-COMP-ATT1          PIC X(1).
           02  DATA-COMP-ATT2          PIC X(1).
           02  DATA-OPEN-FLAG          PIC X(1).
           02  DATA-BUFFER-SIZE        PIC X(4).
           02  DATA-PRIME-ALLOC        PIC X(3).
           02  DATA-SEC-ALLOC          PIC X(3).
           02  DATA-SPACE-OPTN         PIC X(1).
           02  DATA-H-RBA-USED         PIC X(4).
           02  DATA-H-RBA-ALLC         PIC X(4).
           02  DATA-REC-LENGTH         PIC X(4).
           02  DATA-IIP-INFO           PIC X(2).
           02  DATA-EXCP-EXIT          PIC X(8).
           02  DATA-EXT-PTR            PIC X(5).
           02  DATA-GRP-PTR-NO         PIC X(1).
       EJECT
      *****************************************************************
      *  FIXED LAYOUT FOR THE INDEX CATALOG DESCRIPTOR RECORD         *
      *****************************************************************
       01  INDEX-RECORD.
           02  INDEX-CI-NO             PIC X(4).
           02  INDEX-REL               PIC X(1).
           02  INDEX-CRA-VOL           PIC X(6).
           02  INDEX-CRA-CI            PIC X(3).
           02  INDEX-CRA-DEVT          PIC X(4).
           02  FILLER                  PIC X(26).
           02  INDEX-REC-CODE          PIC X(1).
           02  INDEX-DATA-LEN          PIC X(2).
           02  INDEX-FLD-VAR           PIC X(1).
           02  INDEX-FIX-LEN           PIC X(1).
           02  INDEX-ENTRY-NAME        PIC X(44).
           02  INDEX-OWNER             PIC X(8).
           02  INDEX-CRE-DATE          PIC 9(5)  COMP-3.
           02  INDEX-EXP-DATE          PIC 9(5)  COMP-3.
           02  INDEX-COMP-ATT1         PIC X(1).
           02  INDEX-COMP-ATT2         PIC X(1).
           02  INDEX-OPEN-FLAG         PIC X(1).
           02  INDEX-BUFFER-SIZE       PIC X(4).
           02  INDEX-PRIME-ALLOC       PIC X(3).
           02  INDEX-SEC-ALLOC         PIC X(3).
           02  INDEX-SPACE-OPTN        PIC X(1).
           02  INDEX-H-RBA-USED        PIC X(4).
           02  INDEX-H-RBA-ALLC        PIC X(4).
           02  INDEX-REC-LENGTH        PIC X(4).
           02  INDEX-IIP-INFO          PIC X(2).
           02  INDEX-EXCP-EXIT         PIC X(8).
           02  INDEX-EXT-PTR           PIC X(5).
           02  INDEX-GRP-PTR-NO        PIC X(1).
       EJECT
      *****************************************************************
      *  FIXED LAYOUT FOR THE FREE CATALOG DESCRIPTOR RECORD          *
      *****************************************************************
       01  FREE-RECORD.
           02  FREE-CI-NO              PIC X(4).
           02  FILLER                  PIC X(40).
           02  FREE-REC-CODE           PIC X(1).
           02  FREE-NEXT-FREE-CI       PIC X(3).
       EJECT
      *****************************************************************
      *  FIXED LAYOUT FOR THE ALTERNATE INDEX CATALOG DESCRIPTOR      *
      *  RECORD                                                       *
      *****************************************************************
       01  ALTER-IDX-RECORD.
           02  ALTER-IDX-CI-NO         PIC X(4).
           02  ALTER-IDX-REL           PIC X(1).
           02  ALTER-IDX-CRA-VOL       PIC X(6).
           02  ALTER-IDX-CRA-CI        PIC X(3).
           02  ALTER-IDX-CRA-DEVT      PIC X(4).
           02  FILLER                  PIC X(26).
           02  ALTER-IDX-REC-CODE      PIC X(1).
           02  ALTER-IDX-DATA-LEN      PIC X(2).
           02  ALTER-IDX-FLD-VAR       PIC X(1).
           02  ALTER-IDX-FIX-LEN       PIC X(1).
           02  ALTER-IDX-ENTRY-NAME    PIC X(44).
           02  ALTER-IDX-OWNER         PIC X(8).
           02  ALTER-IDX-CRE-DATE      PIC 9(5)  COMP-3.
           02  ALTER-IDX-EXP-DATE      PIC 9(5)  COMP-3.
           02  ALTER-IDX-ATTR          PIC X(1).
           02  ALTER-IDX-EXT-PTR       PIC X(5).
           02  ALTER-IDX-GRP-PTR-NO    PIC X(1).
       EJECT
      *****************************************************************
      *  FIXED LAYOUT FOR THE CATALOG CONTROL DESCRIPTOR RECORD       *
      *****************************************************************
       01  CONTROL-RECORD.
           02  CONTROL-CI-NO           PIC X(4).
           02  FILLER                  PIC X(40).
           02  CONTROL-REC-CODE        PIC X(1).
           02  CONTROL-HI-CI           PIC X(3).
           02  CONTROL-FREE-CI         PIC X(3).
           02  CONTROL-NO-DEL-CI       PIC X(3).
           02  CONTROL-FIRST-DEL       PIC X(3).
           02  CONTROL-DATA-LKEY       PIC X(4).
           02  CONTROL-DATA-LUSE       PIC X(4).
           02  CONTROL-DATA-LALL       PIC X(4).
           02  CONTROL-DATA-HKEY       PIC X(4).
           02  CONTROL-DATA-HUSE       PIC X(4).
           02  CONTROL-DATA-HALL       PIC X(4).
           02  CONTROL-INDEX-HUSE      PIC X(4).
           02  CONTROL-INDEX-HALL      PIC X(4).
           02  CONTROL-IX-LKEYUSE      PIC X(4).
           02  CONTROL-IX-LKEYALL      PIC X(4).
           02  CONTROL-IX-HKEYUSE      PIC X(4).
           02  CONTROL-IX-HKEYALL      PIC X(4).
       EJECT
      *****************************************************************
      *  FIXED LAYOUT FOR THE PATH CATALOG DESCRIPTOR RECORD          *
      *****************************************************************
       01  PATH-RECORD.
           02  PATH-CI-NO              PIC X(4).
           02  PATH-REL                PIC X(1).
           02  PATH-CRA-VOL            PIC X(6).
           02  PATH-CRA-CI             PIC X(3).
           02  PATH-CRA-DEVT           PIC X(4).
           02  FILLER                  PIC X(26).
           02  PATH-REC-CODE           PIC X(1).
           02  PATH-DATA-LEN           PIC X(2).
           02  PATH-FLD-VAR            PIC X(1).
           02  PATH-FIX-LEN            PIC X(1).
           02  PATH-ENTRY-NAME         PIC X(44).
           02  PATH-OWNER              PIC X(8).
           02  PATH-CRE-DATE           PIC 9(5)  COMP-3.
           02  PATH-EXP-DATE           PIC 9(5)  COMP-3.
           02  PATH-ATTR               PIC X(1).
           02  PATH-EXT-PTR            PIC X(5).
           02  PATH-GRP-PTR-NO         PIC X(1).
       EJECT
      *****************************************************************
      *  FIXED LAYOUT FOR THE CATALOG NAME CATALOG DESCRIPTOR RECORD  *
      *****************************************************************
       01  USERCAT-RECORD.
           02  USERCAT-CI-NO           PIC X(4).
           02  USERCAT-REL             PIC X(1).
           02  USERCAT-CRA-VOL         PIC X(6).
           02  USERCAT-CRA-CI          PIC X(3).
           02  USERCAT-CRA-DEVT        PIC X(4).
           02  FILLER                  PIC X(26).
           02  USERCAT-REC-CODE        PIC X(1).
           02  USERCAT-DATA-LEN        PIC X(2).
           02  USERCAT-FLD-VAR         PIC X(1).
           02  USERCAT-FIX-LEN         PIC X(1).
           02  USERCAT-ENTRY-NAME      PIC X(44).
           02  USERCAT-EXT-PTR         PIC X(5).
           02  USERCAT-GRP-PTR-NO      PIC X(1).
       EJECT
      *****************************************************************
      *  FIXED LAYOUT FOR THE VOLUME CATALOG DESCRIPTOR RECORD        *
      *****************************************************************
       01  VOLUME-RECORD.
           02  VOLUME-CI-NO            PIC X(4).
           02  VOLUME-REL              PIC X(1).
           02  VOLUME-CRA-VOL          PIC X(6).
           02  VOLUME-CRA-CI           PIC X(3).
           02  VOLUME-CRA-DEVT         PIC X(4).
           02  FILLER                  PIC X(26).
           02  VOLUME-REC-CODE         PIC X(1).
           02  VOLUME-DATA-LEN         PIC X(2).
           02  VOLUME-FLD-VAR          PIC X(1).
           02  VOLUME-FIX-LEN          PIC X(1).
           02  VOLUME-ENTRY-NAME       PIC X(44).
           02  VOLUME-TSTAMP           PIC X(8).
           02  VOLUME-DEV-CHAR.
               03  VOLUME-DEV-TYPE     PIC X(4).
               03  VOLUME-MAX-BLKSZ    PIC X(4).
               03  VOLUME-MAX-CYL      PIC X(2).
               03  VOLUME-CYL-TRK      PIC X(2).
               03  VOLUME-TRK-BYTE     PIC X(2).
               03  VOLUME-GAP-NO       PIC X(1).
               03  VOLUME-GAP-LAST     PIC X(1).
               03  VOLUME-NONK-BYTE    PIC X(1).
               03  VOLUME-DEV-FLAG     PIC X(1).
               03  VOLUME-TOL-FACTOR   PIC X(2).
           02  VOLUME-REC-FLAG         PIC X(1).
           02  VOLUME-SUBALL-EXT       PIC X(1).
           02  VOLUME-RESERVE-SPC      PIC X(4).
           02  VOLUME-DER-INFO   REDEFINES VOLUME-RESERVE-SPC.
               03  VOLUME-NO-DATA-SPC  PIC X(2).
               03  VOLUME-NO-DATA-SET  PIC X(2).
           02  VOLUME-EXT-PTR          PIC X(5).
           02  VOLUME-GRP-PTR-NO       PIC X(1).
       EJECT
      *****************************************************************
      *  FIXED LAYOUT FOR THE EXTENSION CATALOG DESCRIPTOR RECORD     *
      *****************************************************************
       01  EXTEND-RECORD.
           02  EXTEND-CI-NO            PIC X(4).
           02  EXTEND-REL              PIC X(1).
           02  EXTEND-CRA-VOL          PIC X(6).
           02  EXTEND-CRA-CI           PIC X(3).
           02  EXTEND-CRA-DEVT         PIC X(4).
           02  FILLER                  PIC X(26).
           02  EXTEND-REC-CODE         PIC X(1).
           02  EXTEND-DATA-LEN         PIC X(2).
           02  EXTEND-FLD-VAR          PIC X(1).
           02  EXTEND-FIX-LEN          PIC X(1).
           02  EXTEND-EXT-PTR          PIC X(5).
           02  EXTEND-GRP-PTR-NO       PIC X(1).
           02  EXTEND-GROUPS           PIC X(450).
       EJECT
      *****************************************************************
      *  FIXED LAYOUT FOR THE UPGRADE CATALOG DESCRIPTOR RECORD       *
      *****************************************************************
       01  UPGRADE-RECORD.
           02  UPGRADE-CI-NO           PIC X(4).
           02  UPGRADE-REL             PIC X(1).
           02  UPGRADE-CRA-VOL         PIC X(6).
           02  UPGRADE-CRA-CI          PIC X(3).
           02  UPGRADE-CRA-DEVT        PIC X(4).
           02  FILLER                  PIC X(26).
           02  UPGRADE-REC-CODE        PIC X(1).
           02  UPGRADE-DATA-LEN        PIC X(2).
           02  UPGRADE-FLD-VAR         PIC X(1).
           02  UPGRADE-FIX-LEN         PIC X(1).
           02  UPGRADE-EXT-PTR         PIC X(5).
           02  UPGRADE-GRP-PTR-NO      PIC X(1).
       EJECT
      *****************************************************************
      *  LAYOUT FOR THE ACCESS METHOD DATA SERVICES BLOCK OCCURENCE   *
      *****************************************************************
       01  AMDSB-OCCURENCE.
           02  AMDSBNV                 PIC X.
           02  AMDSBLN                 PIC X.
           02  AMDSBID                 PIC X.
           02  AMDATTR                 PIC X.
           02  AMDLEN                  PIC XX.
           02  AMDNEST                 PIC XX.
           02  AMDRKP                  PIC XX.
           02  AMDKEYLN                PIC XX.
           02  AMDPCTCA                PIC X.
           02  AMDRCFRM            REDEFINES AMDPCTCA   PIC X.
           02  AMDPCTCI                PIC X.
           02  AMDICPCA                PIC XX.
           02  AMDFSCA                 PIC XX.
           02  AMDFSCI                 PIC X(4).
           02  AMDCINV                 PIC X(4).
           02  AMDLRECL                PIC X(4).
           02  AMDHLRBA                PIC X(4).
           02  AMDNSLOT            REDEFINES AMDHLRBA  PIC X(4).
           02  AMDBLREC            REDEFINES AMDHLRBA  PIC X(4).
           02  AMDSSRBA                PIC X(4).
           02  AMDMAPXRR           REDEFINES AMDSSRBA  PIC X(4).
           02  AMDPARDB                PIC X(4).
           02  AMDATTR3                PIC X.
           02  AMDFILL                 PIC X(7).
           02  AMDSTMST                PIC X(8).
           02  AMDSTSTP            REDEFINES AMDSTMST  PIC X(8).
           02  AMDNIL                  PIC XX.
           02  AMDNEDB                 PIC XX.
           02  AMDNEXT             REDEFINES AMDNEDB  PIC XX.
           02  AMDNLR                  PIC X(4).
           02  AMDDELR                 PIC X(4).
           02  AMDIREC                 PIC X(4).
           02  AMDUPR                  PIC X(4).
           02  AMDRETR                 PIC X(4).
           02  AMDFSPB                 PIC X(4).
           02  AMDNCIS                 PIC X(4).
           02  AMDNCAS                 PIC X(4).
           02  AMDEXCP                 PIC X(4).
       EJECT
      *****************************************************************
      *  LAYOUT FOR THE ASSOCIATED RECORD OCCURENCE                   *
      *****************************************************************
       01  ASSOC-OCCURENCE.
           02  ASSOC-VAR-FLD           PIC X.
           02  ASSOC-LEN               PIC X.
           02  ASSOC-TYPE              PIC X.
           02  ASSOC-CI-NO             PIC X(3).
           02  ASSOC-TYPE-A            PIC X.
           02  ASSOC-CI-NO-A           PIC X(3).
       EJECT
      *****************************************************************
      *  LAYOUT FOR THE VOLUME INFORMATION OCCURENCE                  *
      *****************************************************************
       01  VOLUME-OCCURENCE.
           02  VOL-VAR-FLD             PIC X.
           02  VOL-LEN                 PIC X.
           02  VOL-DEVTYP              PIC X(4).
           02  VOL-SERNO               PIC X(6).
           02  VOL-FILESEQ             PIC XX.
           02  VOL-FLAG                PIC X.
           02  VOL-NOEXTNT             PIC X.
           02  VOL-HKRBA               PIC X(4).
           02  VOL-HURBA               PIC X(4).
           02  VOL-HARBA               PIC X(4).
           02  VOL-PHYBLKSZ            PIC X(4).
           02  VOL-NOBLKTRK            PIC XX.
           02  VOL-NOTRKAU             PIC XX.
           02  VOL-ITYPEXT             PIC X.
           02  VOL-DSDIRSN             PIC XX.
       SKIP1
      *****************************************************************
      *  VOLUME LOW-KEY KEYRANGE INFORMATION                          *
      *****************************************************************
       01  VOL-LKEY-ARRAY.
           02  ARRAY-LKEY          OCCURS 64 TIMES  INDEXED BY LK.
               03  LKEY-CHAR           PIC X.
       01  VOL-LKEY                REDEFINES VOL-LKEY-ARRAY  PIC X(64).
       SKIP1
      *****************************************************************
      *  VOLUME HIGH-KEY KEYRANGE INFORMATION                         *
      *****************************************************************
       01  VOL-HKEY-ARRAY.
           02  ARRAY-HKEY          OCCURS 64 TIMES  INDEXED BY HK.
               03  HKEY-CHAR           PIC X.
       01  VOL-HKEY                REDEFINES VOL-HKEY-ARRAY  PIC X(64).
       SKIP1
      *****************************************************************
      *  VOLUME ALLOCATION EXTENT INFORMATION                         *
      *****************************************************************
       01  VOL-EXTENT-ARRAY.
           02  ARRAY-EXTENT        OCCURS 20 TIMES   INDEXED BY EX.
               03  EXTENT-CHAR         PIC X.
       01  VOL-EXTENT              REDEFINES VOL-EXTENT-ARRAY.
           02  VOL-SPC-SEQ             PIC XX.
           02  VOL-LOW-CYL             PIC XX.
           02  VOL-LOW-HEAD            PIC XX.
           02  VOL-HIGH-CYL            PIC XX.
           02  VOL-HIGH-HEAD           PIC XX.
           02  VOL-NO-TRACKS           PIC XX.
           02  VOL-LOW-RBA             PIC X(4).
           02  VOL-HIGH-RBA            PIC X(4).
       EJECT
      *****************************************************************
      *  LAYOUT FOR THE PASSWORD OCCURENCE                            *
      *****************************************************************
       01  PASSWORD-OCCURENCE.
           02  PASSWRD-VAR-FLD         PIC X.
           02  PASSWRD-LEN             PIC X.
           02  MSTR-PASSWRD            PIC X(8).
           02  CI-PASSWRD              PIC X(8).
           02  UPDATE-PASSWRD          PIC X(8).
           02  READ-PASSWRD            PIC X(8).
           02  PASSWRD-PROMPT          PIC X(8).
           02  PASSWRD-ATTMPT          PIC XX.
           02  PASSWRD-USVRMDL         PIC X(8).
       SKIP1
      *****************************************************************
      *  PASSWORD USER INFORMATION                                    *
      *****************************************************************
       01  PASSWRD-USER-ARRAY.
           02  ARRAY-PASSWRD       OCCURS 256 TIMES  INDEXED BY P.
               03  PASSWRD-CHAR        PIC X.
       01  PASSWRD-USER           REDEFINES PASSWRD-USER-ARRAY
                                       PIC X(256).
       EJECT
      *****************************************************************
      *  LAYOUT FOR THE VOLUME SPACE ALLOCATION BIT MAP OCCCURENCE    *
      *****************************************************************
       01  SPACE-MAP-OCCURENCE.
           02  SPC-MAP-VAR-FLD         PIC X.
           02  SPC-MAP-LEN             PIC X.
           02  BITMAP-LEN              PIC XX.
           02  BIT-MAP                 PIC X(440).
       EJECT
      *****************************************************************
      *  LAYOUT FOR THE VOLUME DATA SPACE ALLOCATION OCCURENCE        *
      *****************************************************************
       01  DATA-SPACE-OCCURENCE.
           02  DS-VAR-FLD              PIC X.
           02  DS-LEN                  PIC X.
           02  DS-LBL-TSTMP            PIC X(8).
           02  DS-LBL-PTR              PIC X(5).
           02  DS-FLAGS                PIC X.
           02  DS-NO-EXT               PIC X.
           02  DS-ALL-OPTS             PIC X.
           02  DS-SEC-ALL              PIC XXX.
           02  DS-EXT-EXT          OCCURS 16 TIMES  INDEXED BY D.
               03  DS-TT               PIC XX.
               03  DS-NN               PIC XX.
       EJECT
      *****************************************************************
      * LAYOUT FOR THE VOLUME DATA SET DIRECTORY OCCURENCE            *
      *****************************************************************
       01  DIRECTORY-OCCURENCE.
           02  DIR-VAR-FLD             PIC X.
           02  DIR-LEN                 PIC X.
           02  DIR-DS-CI-NO            PIC XXX.
       EJECT
      *****************************************************************
      *  VOLUME GROUP OCCURENCE EXTENSION RECORD POINTER              *
      *****************************************************************
       01  GOP-VOL-EXTEND.
           02  GOP-VOL-CI              PIC X(3).
           02  GOP-VOL-ATTR            PIC X.
           02  GOP-VOL-SEQ             PIC XX.
       SKIP1
      *****************************************************************
      *  GROUP OCCURENCE POINTER                                      *
      *****************************************************************
       01  GOP-RECORD              REDEFINES GOP-VOL-EXTEND.
           02  FILLER                  PIC X.
           02  GOP-REC-DISP            PIC XX.
           02  GOP-REC-ATTR            PIC X.
           02  GOP-REC-SEQ             PIC X.
       SKIP1
      *****************************************************************
      *  GROUP OCCURENCE EXTENSION RECORD POINTER                     *
      *****************************************************************
       01  GOP-EXTEND              REDEFINES GOP-RECORD.
           02  GOP-EXT-CI              PIC X(3).
           02  GOP-EXT-ATTR            PIC X.
           02  GOP-EXT-SEQ             PIC X.
       SKIP1
      *****************************************************************
      *  BYTE LEVEL BIT EXPANSION WORK AREA                           *
      *****************************************************************
       01  EXPAND-BYTE.
           02  BIT-SEVEN               PIC X.
           02  BIT-SIX                 PIC X.
           02  BIT-FIVE                PIC X.
           02  BIT-FOUR                PIC X.
           02  BIT-THREE               PIC X.
           02  BIT-TWO                 PIC X.
           02  BIT-ONE                 PIC X.
           02  BIT-ZERO                PIC X.
       EJECT
      *****************************************************************
      *  EXPANDED GROUP OCCURENCE POINTER ATTRIBUTE BYTE              *
      *****************************************************************
       01  GOP-ATTR-BYTE.
           02  GOP-REC-EXT             PIC X.
           02  GOP-DELETED             PIC X.
           02  GOP-BIT-5               PIC X.
           02  GOP-BIT-4               PIC X.
           02  GOP-BIT-3               PIC X.
           02  GOP-BIT-2               PIC X.
           02  GOP-BIT-1               PIC X.
           02  GOP-BIT-0               PIC X.
       SKIP1
      *****************************************************************
      *  EXPANDED DATA COMPONENT ATTRIBUTE BYTE                       *
      *****************************************************************
       01  DATA-ATTR1-BYTE.
           02  DATA-SPEED              PIC X.
           02  DATA-UNIQUE-SPC         PIC X.
           02  DATA-REUSE              PIC X.
           02  DATA-ERASE              PIC X.
           02  DATA-RCV-CAT            PIC X.
           02  DATA-UPD-INH            PIC X.
           02  DATA-EXPORT             PIC X.
           02  DATA-RSV-0              PIC X.
       SKIP1
      *****************************************************************
      *  EXPANDED DATA COMPONENT SHARE OPTION ATTRIBUTE BYTE          *
      *****************************************************************
       01  DATA-ATTR2-BYTE.
           02  DATA-CR-SHR-2           PIC X.
           02  DATA-CR-SHR-1           PIC X.
           02  DATA-CS-SHR-2           PIC X.
           02  DATA-CS-SHR-1           PIC X.
           02  DATA-NO-ALLOC           PIC X.
           02  DATA-RVD-2              PIC X.
           02  DATA-RVD-1              PIC X.
           02  DATA-UN-USABLE          PIC X.
       SKIP1
      *****************************************************************
      *  EXPANDED DATA COMPONENT SPACE ALLOCATION ATTRIBUTE BYTE      *
      *****************************************************************
       01  DATA-SPCOPT-BYTE.
           02  D-SPC-TRK-ALLOC         PIC X.
           02  D-SPC-CYL-ALLOC         PIC X.
           02  D-SPC-BIT-5             PIC X.
           02  D-SPC-SEC-CLS-0         PIC X.
           02  D-SPC-BIT-3             PIC X.
           02  D-SPC-CLS-3             PIC X.
           02  D-SPC-CLS-2             PIC X.
           02  D-SPC-CLS-1             PIC X.
       SKIP1
      *****************************************************************
      *  EXPANDED INDEX COMPONENT ATTRIBUTE BYTE                      *
      *****************************************************************
       01  INDEX-ATTR1-BYTE.
           02  INDEX-SPEED             PIC X.
           02  INDEX-UNIQUE-SPC        PIC X.
           02  INDEX-REUSE             PIC X.
           02  INDEX-ERASE             PIC X.
           02  INDEX-RCV-CAT           PIC X.
           02  INDEX-UPD-INH           PIC X.
           02  INDEX-EXPORT            PIC X.
           02  INDEX-RSV-0             PIC X.
       SKIP1
      *****************************************************************
      *  EXPANDED INDEX COMPONENT SHARE OPTION ATTRIBUTE BYTE         *
      *****************************************************************
       01  INDEX-ATTR2-BYTE.
           02  INDEX-CR-SHR-2          PIC X.
           02  INDEX-CR-SHR-1          PIC X.
           02  INDEX-CS-SHR-2          PIC X.
           02  INDEX-CS-SHR-1          PIC X.
           02  INDEX-NO-ALLOC          PIC X.
           02  INDEX-RVD-2             PIC X.
           02  INDEX-RVD-1             PIC X.
           02  INDEX-UN-USABLE         PIC X.
       SKIP1
      *****************************************************************
      *  EXPANDED INDEX COMPONENT SPACE ALLOCATION ATTRIBUTE BYTE     *
      *****************************************************************
       01  INDEX-SPCOPT-BYTE.
           02  IN-SPC-TRK-ALLOC        PIC X.
           02  IN-SPC-CYL-ALLOC        PIC X.
           02  IN-SPC-BIT-5            PIC X.
           02  IN-SPC-SEC-CLS-0        PIC X.
           02  IN-SPC-BIT-3            PIC X.
           02  IN-SPC-CLS-3            PIC X.
           02  IN-SPC-CLS-2            PIC X.
           02  IN-SPC-CLS-1            PIC X.
       SKIP1
      *****************************************************************
      *  EXPANDED VOLUME DEVICE ATTRIBUTE BYTE                        *
      *****************************************************************
       01  VOL-DEV-BYTE.
           02  VOL-DV-BIT-7            PIC X.
           02  VOL-DV-BIT-6            PIC X.
           02  VOL-DV-BIT-5            PIC X.
           02  VOL-DV-MODULO           PIC X.
           02  VOL-DV-BLK-OVHD         PIC X.
           02  VOL-DV-BIT-2            PIC X.
           02  VOL-DV-BIT-1            PIC X.
           02  VOL-DV-TOL-FCTR         PIC X.
       SKIP1
      *****************************************************************
      *  EXPANDED COMPONENT ATTRIBUTE BYTE                            *
      *****************************************************************
       01  AMDSB-ATTR-BYTE.
           02  AM-KSDS-FILE            PIC X.
           02  AM-WRITE-CHECK          PIC X.
           02  AM-IMBED                PIC X.
           02  AM-REPLICATE            PIC X.
           02  DS-ORDER-VOLS           PIC X.
           02  AM-KEY-RANGE            PIC X.
           02  AM-RRDS-FILE            PIC X.
           02  AM-SPAN-REC             PIC X.
       SKIP1
      *****************************************************************
      *  EXPANDED COMPONENT RECORD FORMAT ATTRIBUTE BYTE              *
      *****************************************************************
       01  AMDSB-RECFM-BYTE.
           02  REC-FM-IMPLICIT-DEF     PIC X.
           02  REC-FM-BIT-6            PIC X.
           02  REC-FM-NON-CI-FMT       PIC X.
           02  REC-FM-NON-CA-FMT       PIC X.
           02  REC-FM-BIT-3            PIC X.
           02  REC-FM-BLOCKED          PIC X.
           02  REC-FM-VAR-LEN          PIC X.
           02  REC-FM-FIX-LEN          PIC X.
       SKIP1
      *****************************************************************
      *  VOLUME ALLOCATION ATTRIBUTE BYTE                             *
      *****************************************************************
       01  VOL-FLAG-BYTE.
           02  VOL-FL-PRIME            PIC X.
           02  VOL-FL-CANDIDATE        PIC X.
           02  VOL-FL-OVERFLOW         PIC X.
           02  VOL-FL-BIT-4            PIC X.
           02  VOL-FL-BIT-3            PIC X.
           02  VOL-FL-BIT-2            PIC X.
           02  VOL-FL-BIT-1            PIC X.
           02  VOL-FL-BIT-0            PIC X.
       SKIP1
      *****************************************************************
      *  EXPANDED VOLUME INDEX ATTRIBUTE BYTE                         *
      *****************************************************************
       01  VOL-ITYP-BYTE.
           02  VOL-IX-SEQ-SET-IMBED    PIC X.
           02  VOL-IX-NOT-FORMATTED    PIC X.
           02  VOL-IX-BIT-5            PIC X.
           02  VOL-IX-BIT-4            PIC X.
           02  VOL-IX-BIT-3            PIC X.
           02  VOL-IX-BIT-2            PIC X.
           02  VOL-IX-BIT-1            PIC X.
           02  VOL-IX-BIT-0            PIC X.
       SKIP1
      *****************************************************************
      *  EXPANDED DATA SPACE ALLOCATION OPTIONS ATTRIBUTE BYTE        *
      *****************************************************************
       01  DS-SPCOPT-BYTE.
           02  DS-SPC-TRK-ALLOC        PIC X.
           02  DS-SPC-CYL-ALLOC        PIC X.
           02  DS-OPT-BIT-5            PIC X.
           02  DS-OPT-BIT-4            PIC X.
           02  DS-OPT-BIT-3            PIC X.
           02  DS-SPC-CLS-3            PIC X.
           02  DS-SPC-CLS-2            PIC X.
           02  DS-SPC-CLS-1            PIC X.
       SKIP1
      *****************************************************************
      *  EXPANDED DATA SET ATTRIBUTE BYTE                             *
      *****************************************************************
       01  DS-FLAG-BYTE.
           02  DS-FLG-UNQ-SPC          PIC X.
           02  DS-FLG-AUTO-BLT         PIC X.
           02  DS-FLG-USER-CAT         PIC X.
           02  DS-FLG-MSTR-CAT         PIC X.
           02  DS-FLG-CMD-BLT          PIC X.
           02  DS-FLG-BIT-2            PIC X.
           02  DS-FLG-BIT-1            PIC X.
           02  DS-FLG-BIT-0            PIC X.
       EJECT
      *****************************************************************
      *  LIST OF VALID COMPONENT RECORD TYPES FOR A VSAM CATALOG      *
      *****************************************************************
       01  RECORD-TYPES.
           02  NON-VSAM-REC            PIC X  VALUE 'A'.
           02  CLUSTER-REC             PIC X  VALUE 'C'.
           02  DATA-REC                PIC X  VALUE 'D'.
           02  EXTEND-REC              PIC X  VALUE 'E'.
           02  FREE-REC                PIC X  VALUE 'F'.
           02  AIX-REC                 PIC X  VALUE 'G'.
           02  INDEX-REC               PIC X  VALUE 'I'.
           02  CONTROL-REC             PIC X  VALUE 'L'.
           02  PATH-REC                PIC X  VALUE 'R'.
           02  USERCAT-REC             PIC X  VALUE 'U'.
           02  VOLUME-REC              PIC X  VALUE 'V'.
           02  VOL-EXT-REC             PIC X  VALUE 'W'.
           02  UPGRADE-REC             PIC X  VALUE 'Y'.
      *****************************************************************
      *  LIST OF VALID GROUP OCCURENCE POINTER TYPES                  *
      *****************************************************************
       01  GOP-TYPES.
           02  AMDSB-TYPE              PIC 9  VALUE 1.
           02  ASSOCIATION-TYPE        PIC 9  VALUE 2.
           02  VOLUME-TYPE             PIC 9  VALUE 3.
           02  PASSWD-TYPE             PIC 9  VALUE 4.
           02  SPACE-MAP-TYPE          PIC 9  VALUE 5.
           02  DATA-SPACE-TYPE         PIC 9  VALUE 6.
           02  OPEN-GOP-TYPE           PIC 9  VALUE 7.
           02  DATA-DIR-TYPE           PIC 9  VALUE 8.
       EJECT
      *****************************************************************
      *  WORK KEY AREA USED FOR READING AN EXTENSION RECORD           *
      *****************************************************************
       01  WORK-KEY.
           02  WORK-FILL-1             PIC X.
           02  WORK-CI-NO              PIC XXX.
           02  WORK-FILLER             PIC X(40).
       SKIP1
      *****************************************************************
      *  WORK KEY USED FOR INCREMENTING THE RECORD TO BE READ         *
      *****************************************************************
       01  HOLD-KEY.
           02  FILLER                  PIC X(43).
           02  KEY-INC                 PIC X.
       SKIP1
      *****************************************************************
      *  TIME OF DAY FORMATTED FOR PRINTING                           *
      *****************************************************************
       01  HEAD-TIME.
           02  TIME-HOUR               PIC XX.
           02  FILLER                  PIC X  VALUE ':'.
           02  TIME-MIN                PIC XX.
           02  FILLER                  PIC X  VALUE ':'.
           02  TIME-SEC                PIC XX.
       SKIP1
      *****************************************************************
      *   TIME OF DAY STORAGE                                         *
      *****************************************************************
       01  WORK-TIME.
           02  WORK-HOUR               PIC XX.
           02  WORK-MIN                PIC XX.
           02  WORK-SEC                PIC XX.
       SKIP1
      *****************************************************************
      *  TWO BYTE WORK FIELD                                          *
      *****************************************************************
       01  TWO-BYTES.
           02  BYTE-ONE                PIC X.
           02  BYTE-TWO                PIC X.
       SKIP1
      *****************************************************************
      *  WORK AREA USED TO GENERATE KEY FOR EXTENSION RECORD          *
      *****************************************************************
       01  EXTEND-REC-PTR.
           02  EXTEND-REC-CI           PIC XXX.
           02  FILLER                  PIC XX.
       SKIP1
      *****************************************************************
      *  WORK AREA USED FOR GENERATION OF HIGH ALLOCATED RBA DATA     *
      *****************************************************************
       01  HIGH-RBA-ALLOC.
           02  FILLER                  PIC X(4)   VALUE LOW-VALUES.
           02  HIGH-ALLC-RBA           PIC X(4).
       01  HIGH-ALLOC-RBA          REDEFINES HIGH-RBA-ALLOC
                                       PIC 9(18)   COMP.
       SKIP1
      *****************************************************************
      *  WORK AREA USED FOR GENERATION OF HIGH USAGE RBA DATA         *
      *****************************************************************
       01  HIGH-RBA-USED.
           02  FILLER                  PIC X(4)   VALUE LOW-VALUES.
           02  HIGH-USD-RBA            PIC X(4).
       01  HIGH-USED-RBA           REDEFINES HIGH-RBA-USED
                                       PIC 9(18)   COMP.
       SKIP1
      *****************************************************************
      *  WORK AREA FOR TIME STAMP CONVERSION                          *
      *****************************************************************
       01  WORK-TIMES                  PIC X(8).
       01  WORK-TIMES-A            REDEFINES WORK-TIMES.
           02  TIMES-WORK-A            PIC X(7).
           02  FILLER                  PIC X.
       SKIP1
      *****************************************************************
      *  EIGHT CHARACTER BINARY CONVERSION WORK AREA                  *
      *****************************************************************
       01  WORK-BINARY-8               PIC X(8).
       01  BINARY-WORK-8           REDEFINES WORK-BINARY-8
                                       PIC 9(18)  COMP.
       01  WORK-BINARY-A           REDEFINES WORK-BINARY-8.
           02  FILLER                  PIC X.
           02  BINARY-WORK-A           PIC X(7).
       SKIP1
      *****************************************************************
      *  FOUR CHARACTER BINARY CONVERSION WORK AREA                   *
      *****************************************************************
       01  WORK-BINARY                 PIC S9(8)  COMP.
       01  BINARY-WORK             REDEFINES WORK-BINARY  PIC X(4).
       01  BINARY-WORK-1           REDEFINES WORK-BINARY.
           02  FILLER                  PIC X(3).
           02  BINARY-ONE              PIC X.
       01  BINARY-WORK-2           REDEFINES WORK-BINARY.
           02  FILLER                  PIC X(2).
           02  BINARY-TWO              PIC XX.
       01  BINARY-WORK-3           REDEFINES WORK-BINARY.
           02  FILLER                  PIC X.
           02  BINARY-THREE            PIC X(3).
       01  BINARY-WORK-4           REDEFINES WORK-BINARY.
           02  BINARY-FOUR             PIC X(4).
       EJECT
      *****************************************************************
      *  JULIAN TO GREGORIAN DATA CONVERSION WORK AREAS               *
      *****************************************************************
       01  DATE-FIELDS.
           02  CONVERTED-DATE.
               03  CONVERT-DATE-MM     PIC 99    VALUE ZERO.
               03  FILLER              PIC X(1)  VALUE '/'.
               03  CONVERT-DATE-DD     PIC 99    VALUE ZERO.
               03  FILLER              PIC X(1)  VALUE '/'.
               03  CONVERT-DATE-YY     PIC 9999  VALUE ZERO.
           02  CONVERT-WORK-4          PIC 99    VALUE ZERO.
           02  CONVERT-CALC-DDD        PIC S9(3) VALUE ZERO.
           02  CONVERT-JULIAN-DATE     PIC 9(7)  VALUE ZERO.
           02  CONVERT-J-DATE      REDEFINES CONVERT-JULIAN-DATE.
               03  CONVERT-JULIAN-YY   PIC 9(4).
               03  CONVERT-JULIAN-DDD  PIC 9(3).
       EJECT
      *****************************************************************
      *  HOLDING AREAS FOR MULTIPLE RECORD PROCESSING                 *
      *****************************************************************
       01  HOLD-RECORD-1               PIC X(505).
       01  HOLD-RECORD-2               PIC X(505).
       01  HOLD-RECORD-3               PIC X(505).
       01  HOLD-RECORD-4               PIC X(505).
       SKIP1
      *****************************************************************
      *  PRIMARY WORK AREA FOR DATA MOVEMENT AND BREAKOUT             *
      *****************************************************************
       01  WORK-ARRAY-ONE.
           02  ARRAY-ONE           OCCURS 505 TIMES  INDEXED BY A1.
               03  CHAR-ONE            PIC X.
       SKIP1
      *****************************************************************
      *  SECONDARY WORK AREA FOR DATA MOVEMENT AND BREAKOUT           *
      *****************************************************************
       01  WORK-ARRAY-TWO.
           02  ARRAY-TWO           OCCURS 505 TIMES  INDEXED BY A2.
               03  CHAR-TWO            PIC X.
       EJECT
       PROCEDURE DIVISION.
      *****************************************************************
      *  BEGIN PROCESSING OF THE USER CATALOG                         *
      *****************************************************************
           OPEN INPUT FILE-ONE.
           IF VSAM-BYTE NOT = '00'
               DISPLAY 'CATL0001 OPEN ERROR ' VSAM-BYTE
                   ' ON VSAM CATALOG -- JOB CANCELED' UPON CONSOLE
               DIVIDE X BY Y GIVING Z.
           OPEN OUTPUT PRINT-FILE.
      *****************************************************************
      *  READ THE NAME OF THE VSAM CATALOG BEING PROCESSED            *
      *****************************************************************
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE 2 TO WORK-BINARY.
           MOVE LOW-VALUES TO WORK-KEY.
           MOVE BINARY-THREE TO WORK-CI-NO.
           MOVE WORK-KEY TO FILE-NAME.
           START FILE-ONE KEY IS NOT LESS THAN FILE-NAME.
           IF VSAM-BYTE NOT = '00'
               DISPLAY 'CATL0002 INITIAL START ERROR ' VSAM-BYTE
                   ' ON VSAM CATALOG -- JOB CANCELED' UPON CONSOLE
               DIVIDE X BY Y GIVING Z.
           READ FILE-ONE NEXT RECORD.
           IF VSAM-BYTE NOT = '00'
               DISPLAY 'CATL0003 INITIAL READ ERROR ' VSAM-BYTE
                   ' ON VSAM CATALOG -- JOB CANCELED' UPON CONSOLE
               DIVIDE X BY Y GIVING Z.
      *****************************************************************
      *  FORMAT THE HEADING LINES                                     *
      *****************************************************************
           MOVE RECORD-ENT-NAME TO H-USER-CAT.
      *    MOVE CURRENT-DATE TO H-DATE.
           MOVE FUNCTION CURRENT-DATE (1:16) TO DATE-TIME.
      *    MOVE TIME-OF-DAY TO WORK-TIME.
           MOVE DT-YEAR TO H-YEAR.
           MOVE DT-MONTH TO H-MIN.
           MOVE DT-DAY TO H-DAY.
           MOVE DT-HOUR TO WORK-HOUR.
           MOVE DT-MINUTE TO WORK-MIN.
           MOVE DT-SECOND TO WORK-SEC.
           MOVE WORK-HOUR TO TIME-HOUR.
           MOVE WORK-MIN TO TIME-MIN.
           MOVE WORK-SEC TO TIME-SEC.
           MOVE HEAD-TIME TO H-TIME.
           MOVE SPACE TO HOLD-KEY.
           PERFORM WRITE-HEADINGS.
           MOVE SPACE TO DETAIL-LINE-1.
           MOVE SPACE TO DETAIL-LINE-2.
           GO TO READ-NEXT-NAME.
       EJECT
      *****************************************************************
      *  WRITE THE HEADING LINES                                      *
      *****************************************************************
       WRITE-HEADINGS.
           ADD 1 TO PAGE-CTR.
           MOVE ZERO TO LINE-CTR.
           MOVE PAGE-CTR TO H-PAGE.
           MOVE HEAD-LINE-0 TO PRINT-LINE.
           WRITE PRINT-LINE AFTER ADVANCING TOP-PAGE.
           MOVE HEAD-LINE-1 TO PRINT-LINE.
           WRITE PRINT-LINE AFTER ADVANCING 2 LINES.
           MOVE HEAD-LINE-2 TO PRINT-LINE.
           WRITE PRINT-LINE AFTER ADVANCING 1 LINES.
           MOVE SPACE TO PRINT-LINE.
           WRITE PRINT-LINE AFTER ADVANCING 1 LINES.
       SKIP1
      *****************************************************************
      *  PRINT THE DETAIL PRINT LINES (1 OR 2 OR BLANK AS NEEDED)     *
      *****************************************************************
       WRITE-LINE.
           IF DETAIL-LINE-2-SUB-1 NOT = SPACE
               MOVE DETAIL-LINE-1-SUB-2 TO DETAIL-LINE-2-SUB-2
               MOVE SPACE TO DETAIL-LINE-1-SUB-2.
           IF DETAIL-LINE-2-SUB-1 = SPACE
             AND DETAIL-LINE-2-SUB-3 NOT = SPACE
               MOVE DETAIL-LINE-2-SUB-3 TO DETAIL-LINE-1-SUB-3
               MOVE SPACE TO DETAIL-LINE-2.
           IF DETAIL-LINE-1 NOT = SPACE
               MOVE DETAIL-LINE-1 TO PRINT-LINE
               WRITE PRINT-LINE AFTER ADVANCING 1 LINES
                   ADD 1 TO LINE-CTR
                   IF LINE-CTR > MAX-LINE
                       PERFORM WRITE-HEADINGS.
      *            AT EOP PERFORM WRITE-HEADINGS.
           IF DETAIL-LINE-2 NOT = SPACE
               MOVE DETAIL-LINE-2 TO PRINT-LINE
               WRITE PRINT-LINE AFTER ADVANCING 1 LINES
                   ADD 1 TO LINE-CTR
                   IF LINE-CTR > MAX-LINE
                       PERFORM WRITE-HEADINGS.
      *            AT EOP PERFORM WRITE-HEADINGS.
           MOVE SPACE TO DETAIL-LINE-1.
           MOVE SPACE TO DETAIL-LINE-2.
           MOVE SPACE TO PRINT-LINE.
       EJECT
      *****************************************************************
      *  THIS ROUTINE WILL FORMAT A BINARY BYTE (EIGHT BITS) INTO     *
      *  EIGHT BYTES WITH THE BIT ON AND OFF REPRESENTATION IN EACH   *
      *  BYTE.  THE BINARY BYTE IS PUT INTO FIELD WORK-CHAR AND THE   *
      *  EIGHT BYTES ARE RETURNED IN FIELD EXPAND-BYTE.  THE FOUR     *
      *  BYTE FIELDS WORK-BINARY ARE USED HEAVILY IN THIS ROUTINE.    *
      *****************************************************************
       EXPAND-BITS.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE WORK-CHAR TO BINARY-ONE.
           COMPUTE WORK-BIT-EXPAND = WORK-BINARY.
           MOVE ALL ZERO TO EXPAND-BYTE.
           SUBTRACT 128 FROM WORK-BIT-EXPAND.
           IF WORK-BIT-EXPAND LESS THAN ZERO
               MOVE '0' TO BIT-SEVEN
               ADD 128 TO WORK-BIT-EXPAND
             ELSE MOVE '1' TO BIT-SEVEN.
           SUBTRACT 64 FROM WORK-BIT-EXPAND.
           IF WORK-BIT-EXPAND LESS THAN ZERO
               MOVE '0' TO BIT-SIX
               ADD 64 TO WORK-BIT-EXPAND
             ELSE MOVE '1' TO BIT-SIX.
           SUBTRACT 32 FROM WORK-BIT-EXPAND.
           IF WORK-BIT-EXPAND LESS THAN ZERO
               MOVE '0' TO BIT-FIVE
               ADD 32 TO WORK-BIT-EXPAND
             ELSE MOVE '1' TO BIT-FIVE.
           SUBTRACT 16 FROM WORK-BIT-EXPAND.
           IF WORK-BIT-EXPAND LESS THAN ZERO
               MOVE '0' TO BIT-FOUR
               ADD 16 TO WORK-BIT-EXPAND
             ELSE MOVE '1' TO BIT-FOUR.
           SUBTRACT 8 FROM WORK-BIT-EXPAND.
           IF WORK-BIT-EXPAND LESS THAN ZERO
               MOVE '0' TO BIT-THREE
               ADD 8 TO WORK-BIT-EXPAND
             ELSE MOVE '1' TO BIT-THREE.
           SUBTRACT 4 FROM WORK-BIT-EXPAND.
           IF WORK-BIT-EXPAND LESS THAN ZERO
               MOVE '0' TO BIT-TWO
               ADD 4 TO WORK-BIT-EXPAND
             ELSE MOVE '1' TO BIT-TWO.
           SUBTRACT 2 FROM WORK-BIT-EXPAND.
           IF WORK-BIT-EXPAND LESS THAN ZERO
               MOVE '0' TO BIT-ONE
               ADD 2 TO WORK-BIT-EXPAND
             ELSE MOVE '1' TO BIT-ONE.
           SUBTRACT 1 FROM WORK-BIT-EXPAND.
           IF WORK-BIT-EXPAND LESS THAN ZERO
               MOVE '0' TO BIT-ZERO
               ADD 1 TO WORK-BIT-EXPAND
             ELSE MOVE '1' TO BIT-ZERO.
       EJECT
      *****************************************************************
      *  THIS ROUTINE WILL CONVERT A 5 BYTE FIELD IN JULIAN DATE      *
      *  FORMAT INTO AN EIGHT BYTE FIELD IN GREGORIAN DATE FORMAT.    *
      *****************************************************************
       DATE-CONVERT.
           MOVE ZERO TO CONVERT-WORK-4.
           MOVE CONVERT-JULIAN-YY TO CONVERT-DATE-YY.
           IF CONVERT-JULIAN-DDD NOT = ZERO
               AND CONVERT-DATE-YY < 1900
               ADD 2000 TO CONVERT-DATE-YY.
           IF CONVERT-DATE-YY NOT = ZERO
               AND CONVERT-DATE-YY NOT = 1900
               DIVIDE CONVERT-DATE-YY BY 4 GIVING CONVERT-WORK-4.
           MULTIPLY CONVERT-WORK-4 BY 4 GIVING CONVERT-WORK-4.
           MOVE CONVERT-JULIAN-DDD TO CONVERT-CALC-DDD.
           SUBTRACT 1 FROM CONVERT-CALC-DDD.
           IF CONVERT-CALC-DDD < ZERO
               MOVE 00 TO CONVERT-DATE-MM
               MOVE 00 TO CONVERT-DATE-DD
               ADD 999 TO CONVERT-CALC-DDD.
           SUBTRACT 31 FROM CONVERT-CALC-DDD.
           IF CONVERT-CALC-DDD < ZERO
               MOVE 01 TO CONVERT-DATE-MM
               ADD 32 CONVERT-CALC-DDD GIVING CONVERT-DATE-DD
               ADD 999 TO CONVERT-CALC-DDD.
           SUBTRACT 28 FROM CONVERT-CALC-DDD.
           IF CONVERT-CALC-DDD < ZERO
               MOVE 02 TO CONVERT-DATE-MM
               ADD 29 CONVERT-CALC-DDD GIVING CONVERT-DATE-DD
               ADD 999 TO CONVERT-CALC-DDD.
           IF CONVERT-CALC-DDD > 1
               AND CONVERT-CALC-DDD < 370
               AND CONVERT-WORK-4 = CONVERT-DATE-YY
               SUBTRACT 1 FROM CONVERT-CALC-DDD.
           IF CONVERT-CALC-DDD = 1
               AND CONVERT-WORK-4 = CONVERT-DATE-YY
               MOVE 02 TO CONVERT-DATE-MM
               MOVE 29 TO CONVERT-DATE-DD
               ADD 998 TO CONVERT-CALC-DDD.
           SUBTRACT 31 FROM CONVERT-CALC-DDD.
           IF CONVERT-CALC-DDD < ZERO
               MOVE 03 TO CONVERT-DATE-MM
               ADD 32 CONVERT-CALC-DDD GIVING CONVERT-DATE-DD
               ADD 999 TO CONVERT-CALC-DDD.
           SUBTRACT 30 FROM CONVERT-CALC-DDD.
           IF CONVERT-CALC-DDD < ZERO
               MOVE 04 TO CONVERT-DATE-MM
               ADD 31 CONVERT-CALC-DDD GIVING CONVERT-DATE-DD
               ADD 999 TO CONVERT-CALC-DDD.
           SUBTRACT 31 FROM CONVERT-CALC-DDD.
           IF CONVERT-CALC-DDD < ZERO
               MOVE 05 TO CONVERT-DATE-MM
               ADD 32 CONVERT-CALC-DDD GIVING CONVERT-DATE-DD
               ADD 999 TO CONVERT-CALC-DDD.
           SUBTRACT 30 FROM CONVERT-CALC-DDD.
           IF CONVERT-CALC-DDD < ZERO
               MOVE 06 TO CONVERT-DATE-MM
               ADD 31 CONVERT-CALC-DDD GIVING CONVERT-DATE-DD
               ADD 999 TO CONVERT-CALC-DDD.
           SUBTRACT 31 FROM CONVERT-CALC-DDD.
           IF CONVERT-CALC-DDD < ZERO
               MOVE 07 TO CONVERT-DATE-MM
               ADD 32 CONVERT-CALC-DDD GIVING CONVERT-DATE-DD
               ADD 999 TO CONVERT-CALC-DDD.
           SUBTRACT 31 FROM CONVERT-CALC-DDD.
           IF CONVERT-CALC-DDD < ZERO
               MOVE 08 TO CONVERT-DATE-MM
               ADD 32 CONVERT-CALC-DDD GIVING CONVERT-DATE-DD
               ADD 999 TO CONVERT-CALC-DDD.
           SUBTRACT 30 FROM CONVERT-CALC-DDD.
           IF CONVERT-CALC-DDD < ZERO
               MOVE 09 TO CONVERT-DATE-MM
               ADD 31 CONVERT-CALC-DDD GIVING CONVERT-DATE-DD
               ADD 999 TO CONVERT-CALC-DDD.
           SUBTRACT 31 FROM CONVERT-CALC-DDD.
           IF CONVERT-CALC-DDD < ZERO
               MOVE 10 TO CONVERT-DATE-MM
               ADD 32 CONVERT-CALC-DDD GIVING CONVERT-DATE-DD
               ADD 999 TO CONVERT-CALC-DDD.
           SUBTRACT 30 FROM CONVERT-CALC-DDD.
           IF CONVERT-CALC-DDD < ZERO
               MOVE 11 TO CONVERT-DATE-MM
               ADD 31 CONVERT-CALC-DDD GIVING CONVERT-DATE-DD
               ADD 999 TO CONVERT-CALC-DDD.
           SUBTRACT 31 FROM CONVERT-CALC-DDD.
           IF CONVERT-CALC-DDD < ZERO
               MOVE 12 TO CONVERT-DATE-MM
               ADD 32 CONVERT-CALC-DDD GIVING CONVERT-DATE-DD
               ADD 999 TO CONVERT-CALC-DDD.
           IF CONVERT-CALC-DDD = ZERO
               AND CONVERT-DATE-YY NOT = ZERO
               MOVE 12 TO CONVERT-DATE-MM
               MOVE 31 TO CONVERT-DATE-DD.
       EJECT
      *****************************************************************
      *  THIS ROUTINE WILL CONVERT AN EIGHT BYTE TIMESTAMP FIELD IN   *
      *  BINARY FORMAT INTO THE DATE AND TIME.  THE DATE WILL BE IN   *
      *  JULIAN FORMAT AND THE TIME WILL BE IN 24 HOUR FORMAT.  THE   *
      *  TIMESTAMP IS ASSUMED TO BE IN BINARY MICROSECONDS AS THIS IS *
      *  WHAT IS NORMALLY RETURNED BY THE CPU TIME OF DAY CLOCK.      *
      *****************************************************************
       TS-DECODE.
           MOVE LOW-VALUES TO WORK-BINARY-8.
           MOVE TIMES-WORK-A TO BINARY-WORK-A.
           MOVE ZERO TO TS-YEAR.
           MOVE ZERO TO TS-DAY.
           MOVE ZERO TO TS-HOUR.
           MOVE ZERO TO TS-MIN.
           MOVE ZERO TO TS-SEC.
           IF BINARY-WORK-8 = ZERO
               GO TO END-TS-DECODE.
           ADD 1 TO TS-DAY.
           ADD 1900 TO TS-YEAR.
           IF BINARY-WORK-8 LESS TIME-4-YEAR
               GO TO FIND-YEAR-LOOP-1.
           SUBTRACT TIME-4-YEAR FROM BINARY-WORK-8.
           ADD 4 TO TS-YEAR.
       FIND-YEAR-LOOP-1.
           IF BINARY-WORK-8 LESS TIME-4-YEARS
               GO TO FIND-YEAR-LEAP.
           SUBTRACT TIME-4-YEARS FROM BINARY-WORK-8.
           ADD 4 TO TS-YEAR.
           GO TO FIND-YEAR-LOOP-1.
       FIND-YEAR-LEAP.
           IF BINARY-WORK-8 LESS TIME-1-YEARS
               GO TO FIND-DAY-LOOP.
           SUBTRACT TIME-1-YEARS FROM BINARY-WORK-8.
           ADD 1 TO TS-YEAR.
       FIND-YEAR-LOOP-2.
           IF BINARY-WORK-8 LESS TIME-1-YEAR
               GO TO FIND-DAY-LOOP.
           SUBTRACT TIME-1-YEAR FROM BINARY-WORK-8.
           ADD 1 TO TS-YEAR.
           GO TO FIND-YEAR-LOOP-2.
       FIND-DAY-LOOP.
           IF BINARY-WORK-8 LESS THAN TIME-1-DAY
               GO TO FIND-HOUR-LOOP.
           SUBTRACT TIME-1-DAY FROM BINARY-WORK-8.
           ADD 1 TO TS-DAY.
           GO TO FIND-DAY-LOOP.
       FIND-HOUR-LOOP.
           IF BINARY-WORK-8 LESS THAN TIME-1-HOUR
               GO TO FIND-MIN-LOOP.
           SUBTRACT TIME-1-HOUR FROM BINARY-WORK-8.
           ADD 1 TO TS-HOUR.
           GO TO FIND-HOUR-LOOP.
       FIND-MIN-LOOP.
           IF BINARY-WORK-8 LESS THAN TIME-1-MIN
               GO TO FIND-SEC-LOOP.
           SUBTRACT TIME-1-MIN FROM BINARY-WORK-8.
           ADD 1 TO TS-MIN.
           GO TO FIND-MIN-LOOP.
       FIND-SEC-LOOP.
           IF BINARY-WORK-8 LESS THAN TIME-1-SEC
               GO TO END-TS-DECODE.
           SUBTRACT TIME-1-SEC FROM BINARY-WORK-8.
           ADD 1 TO TS-SEC.
           GO TO FIND-SEC-LOOP.
       END-TS-DECODE.
           MOVE TS-YEAR TO CONVERT-JULIAN-YY.
           MOVE TS-DAY TO CONVERT-JULIAN-DDD.
           PERFORM DATE-CONVERT.
           MOVE TS-HOUR TO TIME-HOUR.
           MOVE TS-MIN TO TIME-MIN.
           MOVE TS-SEC TO TIME-SEC.
       TS-DECODE-EXIT.
           EXIT.
       EJECT
      *****************************************************************
      *  PREPARE TO READ THE NEXT RECORD IN THE CATALOG               *
      *****************************************************************
       READ-NEXT-RECORD.
           PERFORM WRITE-LINE.
           WRITE PRINT-LINE AFTER ADVANCING 1 LINES
                   ADD 1 TO LINE-CTR
                   IF LINE-CTR > MAX-LINE
                       PERFORM WRITE-HEADINGS.
      *        AT EOP PERFORM WRITE-HEADINGS.
       SKIP1
      *****************************************************************
      *  SET UP THE KEY TO READ THE NEXT NAME IN THE CATALOG          *
      *****************************************************************
       READ-NEXT-NAME.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE KEY-INC TO BINARY-ONE.
           ADD 1 TO WORK-BINARY.
           MOVE BINARY-ONE TO KEY-INC.
           MOVE HOLD-KEY TO FILE-NAME.
       SKIP1
      *****************************************************************
      *  READ THE NEXT NAME IN THE VSAM CATALOG AND CHECK FOR EOF.    *
      *                                                               *
      *  ONLY CLUSTER, ALTERNATE INDEX, VOLUME, USER CATALOG, AND     *
      *  PATH RECORD TYPES ARE WANTED FOR PROCESSING. DATA, INDEX,    *
      *  AND OTHER RECORDS WHICH ARE NEEDED WILL BE RETRIEVED USING   *
      *  THEIR RECORD NUMBER.                                         *
      *                                                               *
      *  THE ACTUAL RECORDS WHICH CONTAIN THE DATA ARE POINTED TO BY  *
      *  A THREE BYTE RECORD NUMBER WHICH IS STORED IN THE COMPONENT  *
      *  NAME RECORD, WHICH IS RETRIEVED SEQUENTIALLY.                *
      *****************************************************************
       READ-FILE.
           START FILE-ONE KEY IS NOT LESS THAN FILE-NAME.
           IF VSAM-BYTE = '10'
               OR VSAM-BYTE = '23'
               GO TO FINISH-JOB.
           IF VSAM-BYTE NOT = '00'
               DISPLAY 'CATL0004 START ERROR ' VSAM-BYTE
                   ' ON CATALOG ENTRY NAME -- JOB CANCELED'
                   UPON CONSOLE
               DIVIDE X BY Y GIVING Z.
           READ FILE-ONE NEXT RECORD.
           IF VSAM-BYTE = '10'
               GO TO FINISH-JOB.
           IF VSAM-BYTE NOT = '00'
              AND  VSAM-BYTE NOT = '04'
               DISPLAY 'CATL0005 READ ERROR ' VSAM-BYTE
                   ' ON CATALOG ENTRY NAME -- JOB CANCELED'
                   UPON CONSOLE
               DIVIDE X BY Y GIVING Z.
           MOVE LOW-VALUES TO WORK-KEY.
           MOVE RECORD-NUMBER TO WORK-CI-NO.
           MOVE FILE-NAME TO HOLD-KEY.
           MOVE WORK-KEY TO FILE-NAME.
           START FILE-ONE KEY IS NOT LESS THAN FILE-NAME.
           IF VSAM-BYTE NOT = '00'
               DISPLAY 'CATL0006 START ERROR ' VSAM-BYTE
                   ' ON CATALOG RECORD -- JOB CANCELED' UPON CONSOLE
               DIVIDE X BY Y GIVING Z.
           READ FILE-ONE NEXT RECORD.
           IF VSAM-BYTE NOT = '00'
               DISPLAY 'CATL0007 READ ERROR ' VSAM-BYTE
                   ' ON CATALOG RECORD -- JOB CANCELED' UPON CONSOLE
               DIVIDE X BY Y GIVING Z.
           IF RECORD-CODE = CLUSTER-REC
               GO TO PROCESS-RECORD.
           IF RECORD-CODE = AIX-REC
               GO TO PROCESS-RECORD.
           IF RECORD-CODE = VOLUME-REC
               GO TO PROCESS-RECORD.
           IF RECORD-CODE = PATH-REC
               GO TO PROCESS-RECORD.
           IF RECORD-CODE = USERCAT-REC
               GO TO PROCESS-RECORD.
           GO TO READ-NEXT-NAME.
       EJECT
      *****************************************************************
      *  CLEAR THE RECORD HOLD AREAS                                  *
      *                                                               *
      *  THE RECORD HOLD SET 1 IS USED FOR THE ASSOCIATION POINTERS   *
      *  THE RECORD HOLD SET 2 IS USED FOR THE EXTENSION POINTERS     *
      *  THE RECORD HOLD SET 3 IS USED FOR THE DATA SET DIRECTORIES   *
      *  THE RECORD HOLD SET 4 IS USED FOR THE VOLUME EXTENSIONS      *
      *                                                               *
      *  IN EACH CASE THE HOLD SET CONTAINS THE ORIGINAL RECORD BEING *
      *  PROCESSED WHEN THE NEED FOR ANOTHER RECORD WAS REACHED.      *
      *****************************************************************
       PROCESS-RECORD.
           MOVE ZERO TO GOP-TYPE.
           MOVE ZERO TO GOP-TYPE-1.
           MOVE ZERO TO GOP-TYPE-2.
           MOVE ZERO TO GOP-TYPE-3.
           MOVE ZERO TO GOP-TYPE-4.
           MOVE ZERO TO FIX-REC-LEN.
           MOVE ZERO TO FIX-REC-LEN-1.
           MOVE ZERO TO FIX-REC-LEN-2.
           MOVE ZERO TO FIX-REC-LEN-3.
           MOVE ZERO TO FIX-REC-LEN-4.
           MOVE ZERO TO MAX-REC-LEN.
           MOVE ZERO TO MAX-REC-LEN-1.
           MOVE ZERO TO MAX-REC-LEN-2.
           MOVE ZERO TO MAX-REC-LEN-3.
           MOVE ZERO TO MAX-REC-LEN-4.
           MOVE ZERO TO GOP-VAR-NO.
           MOVE ZERO TO GOP-VAR-NO-1.
           MOVE ZERO TO GOP-VAR-NO-2.
           MOVE ZERO TO GOP-VAR-NO-3.
           MOVE ZERO TO GOP-VAR-NO-4.
           MOVE ZERO TO G-O-START.
           MOVE ZERO TO G-O-START-1.
           MOVE ZERO TO G-O-START-2.
           MOVE ZERO TO G-O-START-3.
           MOVE ZERO TO G-O-START-4.
           MOVE ZERO TO G-O-SEQ.
           MOVE ZERO TO G-O-SEQ-1.
           MOVE ZERO TO G-O-SEQ-2.
           MOVE ZERO TO G-O-SEQ-3.
           MOVE ZERO TO G-O-SEQ-4.
           MOVE ZERO TO HOLD-INDEX.
           MOVE ZERO TO HOLD-INDEX-1.
           MOVE ZERO TO HOLD-INDEX-2.
           MOVE ZERO TO HOLD-INDEX-3.
           MOVE ZERO TO HOLD-INDEX-4.
           MOVE LOW-VALUES TO REC-TYPE.
           MOVE LOW-VALUES TO REC-TYPE-1.
           MOVE LOW-VALUES TO REC-TYPE-2.
           MOVE LOW-VALUES TO REC-TYPE-3.
           MOVE LOW-VALUES TO REC-TYPE-4.
           MOVE LOW-VALUES TO EXT-REC-PTR.
           MOVE LOW-VALUES TO EXT-REC-PTR-1.
           MOVE LOW-VALUES TO EXT-REC-PTR-2.
           MOVE LOW-VALUES TO EXT-REC-PTR-3.
           MOVE LOW-VALUES TO EXT-REC-PTR-4.
           MOVE LOW-VALUES TO HOLD-RECORD-1.
           MOVE LOW-VALUES TO HOLD-RECORD-2.
           MOVE LOW-VALUES TO HOLD-RECORD-3.
           MOVE LOW-VALUES TO HOLD-RECORD-4.
           MOVE ZERO TO VOL-NO-TRK.
           MOVE ZERO TO GOP-TYPE-EXT.
           MOVE ZERO TO GOP-TYPE-VOL-EXT.
           MOVE ZERO TO G-O-SEQ-EXT.
           MOVE ZERO TO G-O-SEQ-VOL-EXT.
           MOVE LOW-VALUES TO EXT-CI.
           MOVE LOW-VALUES TO EXT-CI-REC.
           GO TO PROCESS-REC.
       SKIP1
      *****************************************************************
      *  READ EITHER AN EXTENSION OR A VOLUME EXTENSION RECORD        *
      *****************************************************************
       READ-EXT-RECORD.
           MOVE LOW-VALUES TO WORK-KEY.
      *    MOVE RECORD-NUMBER TO WORK-CI-NO.
           MOVE EXT-REC-NO TO WORK-CI-NO.
           MOVE WORK-KEY TO FILE-NAME.
           START FILE-ONE KEY IS NOT LESS THAN FILE-NAME.
           IF VSAM-BYTE NOT = '00'
               DISPLAY 'CATL0008 START ERROR ' VSAM-BYTE
                   ' ON EXTENSION RECORD -- JOB CANCELED' UPON CONSOLE
               DIVIDE X BY Y GIVING Z.
           READ FILE-ONE NEXT RECORD.
           IF VSAM-BYTE NOT = '00'
               DISPLAY 'CATL0009 READ ERROR ' VSAM-BYTE
                   ' ON EXTENSION RECORD -- JOB CANCELED' UPON CONSOLE
               DIVIDE X BY Y GIVING Z.
       EJECT
      *****************************************************************
      *  FIND OUT WHICH TYPE RECORD WAS JUST READ IN TO PROCESS       *
      *****************************************************************
       PROCESS-REC.
           MOVE RECORD-ONE TO WORK-ARRAY-ONE.
           MOVE RECORD-CODE TO REC-TYPE.
           IF RECORD-CODE = NON-VSAM-REC
               GO TO DECODE-NON-VSAM-RECORD.
           IF RECORD-CODE = CLUSTER-REC
               GO TO DECODE-CLUSTER-RECORD.
           IF RECORD-CODE = DATA-REC
               GO TO DECODE-DATA-RECORD.
           IF RECORD-CODE = EXTEND-REC
               GO TO DECODE-EXTEND-RECORD.
           IF RECORD-CODE = FREE-REC
               GO TO DECODE-FREE-RECORD.
           IF RECORD-CODE = AIX-REC
               GO TO DECODE-ALTER-IDX-RECORD.
           IF RECORD-CODE = INDEX-REC
               GO TO DECODE-INDEX-RECORD.
           IF RECORD-CODE = CONTROL-REC
               GO TO DECODE-CONTROL-RECORD.
           IF RECORD-CODE = PATH-REC
               GO TO DECODE-PATH-RECORD.
           IF RECORD-CODE = USERCAT-REC
               GO TO DECODE-USERCAT-RECORD.
           IF RECORD-CODE = VOLUME-REC
               GO TO DECODE-VOLUME-RECORD.
           IF RECORD-CODE = VOL-EXT-REC
               GO TO DECODE-EXTEND-RECORD.
           IF RECORD-CODE = UPGRADE-REC
               GO TO DECODE-UPGRADE-RECORD.
           DISPLAY 'CATL0010 RECORD TYPE ' RECORD-CODE 'UNKNOWN'.
           GO TO READ-NEXT-NAME.
       EJECT
      *****************************************************************
      * THE NEXT SECTIONS FORMAT THE CATALOG RECORD FOR PROCESSING.   *
      * THE MAXIMUM LENGTH OF THE RECORD, LENGTH OF THE FIXED AREA,   *
      * AND CERTAIN FIXED FIELDS ARE FORMATTED FOR PROCESSING AND     *
      * PRINTING.  IF THERE IS A VOLUME DATA SET DIRECTORY SEARCH     *
      * IN PROGRESS THE FORMATTING OF THE PRINTED FIELDS ARE BYPASSED.*
      *****************************************************************
       EJECT
      *****************************************************************
      *  SET UP THE WORK FIELDS FOR A NON-VSAM RECORD                 *
      *****************************************************************
       DECODE-NON-VSAM-RECORD.
           MOVE RECORD-ONE TO NON-VSAM-RECORD.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE NON-VSAM-DATA-LEN TO BINARY-TWO.
           COMPUTE MAX-REC-LEN = WORK-BINARY + 1.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE NON-VSAM-FIX-LEN TO BINARY-ONE.
           COMPUTE FIX-REC-LEN = WORK-BINARY + 1.
           MOVE NON-VSAM-EXT-PTR TO EXT-REC-PTR.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE NON-VSAM-GRP-PTR-NO TO BINARY-ONE.
           COMPUTE GOP-VAR-NO = WORK-BINARY.
           IF HOLD-INDEX-3 NOT = ZERO
               GO TO DECODE-GROUP-OCCURENCES.
           MOVE 'NVS' TO D-ENT-TYPE-1.
           MOVE NON-VSAM-ENTRY-NAME TO D-ENT-NAME.
           GO TO DECODE-GROUP-OCCURENCES.
       EJECT
      *****************************************************************
      *  SET UP THE WORK FIELDS FOR A CLUSTER RECORD                  *
      *****************************************************************
       DECODE-CLUSTER-RECORD.
           MOVE RECORD-ONE TO CLUSTER-RECORD.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE CLUSTER-DATA-LEN TO BINARY-TWO.
           COMPUTE MAX-REC-LEN = WORK-BINARY + 1.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE CLUSTER-FIX-LEN TO BINARY-ONE.
           COMPUTE FIX-REC-LEN = WORK-BINARY + 1.
           MOVE CLUSTER-EXT-PTR TO EXT-REC-PTR.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE CLUSTER-GRP-PTR-NO TO BINARY-ONE.
           COMPUTE GOP-VAR-NO = WORK-BINARY.
           IF HOLD-INDEX-3 NOT = ZERO
               GO TO DECODE-GROUP-OCCURENCES.
           MOVE 'CLS' TO D-ENT-TYPE-1.
           MOVE CLUSTER-ENTRY-NAME TO D-ENT-NAME.
           MOVE CLUSTER-CRE-DATE TO CONVERT-JULIAN-DATE.
           PERFORM DATE-CONVERT.
           MOVE CONVERTED-DATE TO D-CRE-DATE-1.
           MOVE CLUSTER-EXP-DATE TO CONVERT-JULIAN-DATE.
           PERFORM DATE-CONVERT.
           MOVE CONVERTED-DATE TO D-EXP-DATE-1.
           GO TO DECODE-GROUP-OCCURENCES.
       EJECT
      *****************************************************************
      *  SET UP THE WORK FIELDS FOR A DATA RECORD                     *
      *****************************************************************
       DECODE-DATA-RECORD.
           MOVE RECORD-ONE TO DATA-RECORD.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE DATA-DATA-LEN TO BINARY-TWO.
           COMPUTE MAX-REC-LEN = WORK-BINARY + 1.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE DATA-FIX-LEN TO BINARY-ONE.
           COMPUTE FIX-REC-LEN = WORK-BINARY + 1.
           MOVE DATA-EXT-PTR TO EXT-REC-PTR.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE DATA-GRP-PTR-NO TO BINARY-ONE.
           COMPUTE GOP-VAR-NO = WORK-BINARY.
           MOVE DATA-COMP-ATT1 TO WORK-CHAR.
           PERFORM EXPAND-BITS.
           MOVE EXPAND-BYTE TO DATA-ATTR1-BYTE.
           MOVE DATA-COMP-ATT2 TO WORK-CHAR.
           PERFORM EXPAND-BITS.
           MOVE EXPAND-BYTE TO DATA-ATTR2-BYTE.
           MOVE DATA-SPACE-OPTN TO WORK-CHAR.
           PERFORM EXPAND-BITS.
           MOVE EXPAND-BYTE TO DATA-SPCOPT-BYTE.
           IF HOLD-INDEX-3 NOT = ZERO
               GO TO DECODE-GROUP-OCCURENCES.
           MOVE 'DAT' TO D-ENT-TYPE-1.
           MOVE DATA-ENTRY-NAME TO D-ENT-NAME.
           MOVE DATA-CRE-DATE TO CONVERT-JULIAN-DATE.
           PERFORM DATE-CONVERT.
           MOVE CONVERTED-DATE TO D-CRE-DATE-1.
           MOVE DATA-EXP-DATE TO CONVERT-JULIAN-DATE.
           PERFORM DATE-CONVERT.
           MOVE CONVERTED-DATE TO D-EXP-DATE-1.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE DATA-REC-LENGTH TO BINARY-FOUR.
           MOVE WORK-BINARY TO PRINT-NUMBER.
           MOVE PRINT-NUMBER TO D-AVG-SIZE.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE DATA-PRIME-ALLOC TO BINARY-THREE.
           MOVE WORK-BINARY TO PRINT-NUMBER.
           MOVE PRINT-NUMBER TO D-PR-ALLOC.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE DATA-SEC-ALLOC TO BINARY-THREE.
           MOVE WORK-BINARY TO PRINT-NUMBER.
           MOVE PRINT-NUMBER TO D-SEC-ALLOC.
           IF D-SPC-TRK-ALLOC = '1'
               AND D-SPC-CYL-ALLOC = '1'
               MOVE 'CYL' TO D-ALLOC-TYPE.
           IF D-SPC-TRK-ALLOC = '1'
               AND D-SPC-CYL-ALLOC = '0'
               MOVE 'TRK' TO D-ALLOC-TYPE.
           MOVE ZERO TO D-SPC-CLS.
           IF D-SPC-CLS-1 = '1'
               ADD 1 TO D-SPC-CLS.
           IF D-SPC-CLS-2 = '1'
               ADD 2 TO D-SPC-CLS.
           IF D-SPC-CLS-3 = '1'
               ADD 4 TO D-SPC-CLS.
           MOVE 1 TO D-CR-SHR.
           IF DATA-CR-SHR-1 = '1'
               ADD 1 TO D-CR-SHR.
           IF DATA-CR-SHR-2 = '1'
               ADD 2 TO D-CR-SHR.
           MOVE 1 TO D-CS-SHR.
           IF DATA-CS-SHR-1 = '1'
               ADD 1 TO D-CS-SHR.
           IF DATA-CS-SHR-2 = '1'
               ADD 2 TO D-CS-SHR.
           MOVE DATA-H-RBA-ALLC TO HIGH-ALLC-RBA.
           MOVE DATA-H-RBA-USED TO HIGH-USD-RBA.
           MOVE ZERO TO PCT-FULL.
           IF HIGH-ALLOC-RBA NOT = ZERO
               DIVIDE HIGH-USED-RBA BY HIGH-ALLOC-RBA GIVING PCT-FULL.
           MOVE FULL-PCT TO PRINT-NUMBER.
           MOVE PRINT-NUMBER TO D-PCT-FULL.
           GO TO DECODE-GROUP-OCCURENCES.
       EJECT
      *****************************************************************
      *  SET UP THE WORK FIELDS FOR AN EXTENSION RECORD               *
      *****************************************************************
       DECODE-EXTEND-RECORD.
           MOVE RECORD-ONE TO EXTEND-RECORD.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE EXTEND-DATA-LEN TO BINARY-TWO.
           COMPUTE MAX-REC-LEN = WORK-BINARY + 1.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE EXTEND-FIX-LEN TO BINARY-ONE.
           COMPUTE FIX-REC-LEN = WORK-BINARY + 1.
           MOVE EXTEND-EXT-PTR TO EXT-REC-PTR.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE EXTEND-GRP-PTR-NO TO BINARY-ONE.
           COMPUTE GOP-VAR-NO = WORK-BINARY.
           IF EXT-CI-REC NOT = LOW-VALUES
               GO TO DECODE-GROUP-OCCURENCES.
           IF HOLD-INDEX-2 NOT = ZERO
               GO TO DECODE-GROUP-OCCURENCES.
           IF HOLD-INDEX-3 NOT = ZERO
               GO TO DECODE-GROUP-OCCURENCES.
           IF HOLD-INDEX-4 NOT = ZERO
               GO TO DECODE-GROUP-OCCURENCES.
           MOVE 'EXT' TO D-ENT-TYPE-1.
           IF REC-TYPE = VOL-EXT-REC
               MOVE 'VXT' TO D-ENT-TYPE-1.
           GO TO DECODE-GROUP-OCCURENCES.
       EJECT
      *****************************************************************
      *  SET UP THE WORK FIELDS FOR A FREE RECORD                     *
      *****************************************************************
       DECODE-FREE-RECORD.
           MOVE RECORD-ONE TO FREE-RECORD.
           IF HOLD-INDEX-3 NOT = ZERO
               GO TO DECODE-GROUP-OCCURENCES.
           MOVE 'FRE' TO D-ENT-TYPE-1.
           PERFORM WRITE-LINE.
           GO TO READ-NEXT-NAME.
       EJECT
      *****************************************************************
      *  SET UP THE WORK FIELDS FOR AN ALTERNATE INDEX RECORD         *
      *****************************************************************
       DECODE-ALTER-IDX-RECORD.
           MOVE RECORD-ONE TO ALTER-IDX-RECORD.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE ALTER-IDX-DATA-LEN TO BINARY-TWO.
           COMPUTE MAX-REC-LEN = WORK-BINARY + 1.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE ALTER-IDX-FIX-LEN TO BINARY-ONE.
           COMPUTE FIX-REC-LEN = WORK-BINARY + 1.
           MOVE ALTER-IDX-EXT-PTR TO EXT-REC-PTR.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE ALTER-IDX-GRP-PTR-NO TO BINARY-ONE.
           COMPUTE GOP-VAR-NO = WORK-BINARY.
           IF HOLD-INDEX-3 NOT = ZERO
               GO TO DECODE-GROUP-OCCURENCES.
           MOVE 'AIX' TO D-ENT-TYPE-1.
           MOVE ALTER-IDX-ENTRY-NAME TO D-ENT-NAME.
           MOVE ALTER-IDX-CRE-DATE TO CONVERT-JULIAN-DATE.
           PERFORM DATE-CONVERT.
           MOVE CONVERTED-DATE TO D-CRE-DATE-1.
           MOVE ALTER-IDX-EXP-DATE TO CONVERT-JULIAN-DATE.
           PERFORM DATE-CONVERT.
           MOVE CONVERTED-DATE TO D-EXP-DATE-1.
           GO TO DECODE-GROUP-OCCURENCES.
       EJECT
      *****************************************************************
      *  SET UP THE WORK FIELDS FOR AN INDEX RECORD                   *
      *****************************************************************
       DECODE-INDEX-RECORD.
           MOVE RECORD-ONE TO INDEX-RECORD.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE INDEX-DATA-LEN TO BINARY-TWO.
           COMPUTE MAX-REC-LEN = WORK-BINARY + 1.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE INDEX-FIX-LEN TO BINARY-ONE.
           COMPUTE FIX-REC-LEN = WORK-BINARY + 1.
           MOVE INDEX-EXT-PTR TO EXT-REC-PTR.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE INDEX-GRP-PTR-NO TO BINARY-ONE.
           COMPUTE GOP-VAR-NO = WORK-BINARY.
           MOVE INDEX-COMP-ATT1 TO WORK-CHAR.
           PERFORM EXPAND-BITS.
           MOVE EXPAND-BYTE TO INDEX-ATTR1-BYTE.
           MOVE INDEX-COMP-ATT2 TO WORK-CHAR.
           PERFORM EXPAND-BITS.
           MOVE EXPAND-BYTE TO INDEX-ATTR2-BYTE.
           MOVE INDEX-SPACE-OPTN TO WORK-CHAR.
           PERFORM EXPAND-BITS.
           MOVE EXPAND-BYTE TO INDEX-SPCOPT-BYTE.
           IF HOLD-INDEX-3 NOT = ZERO
               GO TO DECODE-GROUP-OCCURENCES.
           MOVE 'IDX' TO D-ENT-TYPE-1.
           MOVE INDEX-ENTRY-NAME TO D-ENT-NAME.
           MOVE INDEX-CRE-DATE TO CONVERT-JULIAN-DATE.
           PERFORM DATE-CONVERT.
           MOVE CONVERTED-DATE TO D-CRE-DATE-1.
           MOVE INDEX-EXP-DATE TO CONVERT-JULIAN-DATE.
           PERFORM DATE-CONVERT.
           MOVE CONVERTED-DATE TO D-EXP-DATE-1.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE INDEX-REC-LENGTH TO BINARY-FOUR.
           MOVE WORK-BINARY TO PRINT-NUMBER.
           MOVE PRINT-NUMBER TO D-AVG-SIZE.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE INDEX-PRIME-ALLOC TO BINARY-THREE.
           MOVE WORK-BINARY TO PRINT-NUMBER.
           MOVE PRINT-NUMBER TO D-PR-ALLOC.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE INDEX-SEC-ALLOC TO BINARY-THREE.
           MOVE WORK-BINARY TO PRINT-NUMBER.
           MOVE PRINT-NUMBER TO D-SEC-ALLOC.
           IF IN-SPC-TRK-ALLOC = '1'
               AND IN-SPC-CYL-ALLOC = '1'
               MOVE 'CYL' TO D-ALLOC-TYPE.
           IF IN-SPC-TRK-ALLOC = '1'
               AND IN-SPC-CYL-ALLOC = '0'
               MOVE 'TRK' TO D-ALLOC-TYPE.
           MOVE ZERO TO D-SPC-CLS.
           IF IN-SPC-CLS-1 = '1'
               ADD 1 TO D-SPC-CLS.
           IF IN-SPC-CLS-2 = '1'
               ADD 2 TO D-SPC-CLS.
           IF IN-SPC-CLS-3 = '1'
               ADD 4 TO D-SPC-CLS.
           MOVE 1 TO D-CR-SHR.
           IF INDEX-CR-SHR-1 = '1'
               ADD 1 TO D-CR-SHR.
           IF INDEX-CR-SHR-2 = '1'
               ADD 2 TO D-CR-SHR.
           MOVE 1 TO D-CS-SHR.
           IF INDEX-CS-SHR-1 = '1'
               ADD 1 TO D-CS-SHR.
           IF INDEX-CS-SHR-2 = '1'
               ADD 2 TO D-CS-SHR.
           MOVE INDEX-H-RBA-ALLC TO HIGH-ALLC-RBA.
           MOVE INDEX-H-RBA-USED TO HIGH-USD-RBA.
           MOVE ZERO TO PCT-FULL.
           IF HIGH-ALLOC-RBA NOT = ZERO
               DIVIDE HIGH-USED-RBA BY HIGH-ALLOC-RBA GIVING PCT-FULL.
           MOVE FULL-PCT TO PRINT-NUMBER.
           MOVE PRINT-NUMBER TO D-PCT-FULL.
           GO TO DECODE-GROUP-OCCURENCES.
       EJECT
      *****************************************************************
      *  SET UP THE WORK FIELDS FOR A CATALOG CONTROL RECORD          *
      *****************************************************************
       DECODE-CONTROL-RECORD.
           MOVE RECORD-ONE TO CONTROL-RECORD.
           IF HOLD-INDEX-3 NOT = ZERO
               GO TO DECODE-GROUP-OCCURENCES.
           MOVE 'CCR' TO D-ENT-TYPE-1.
           PERFORM WRITE-LINE.
           GO TO READ-NEXT-NAME.
       EJECT
      *****************************************************************
      *  SET UP THE WORK FIELDS FOR A PATH RECORD                     *
      *****************************************************************
       DECODE-PATH-RECORD.
           MOVE RECORD-ONE TO PATH-RECORD.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE PATH-DATA-LEN TO BINARY-TWO.
           COMPUTE MAX-REC-LEN = WORK-BINARY + 1.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE PATH-FIX-LEN TO BINARY-ONE.
           COMPUTE FIX-REC-LEN = WORK-BINARY + 1.
           MOVE PATH-EXT-PTR TO EXT-REC-PTR.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE PATH-GRP-PTR-NO TO BINARY-ONE.
           COMPUTE GOP-VAR-NO = WORK-BINARY.
           IF HOLD-INDEX-3 NOT = ZERO
               GO TO DECODE-GROUP-OCCURENCES.
           MOVE 'PTH' TO D-ENT-TYPE-1.
           MOVE PATH-ENTRY-NAME TO D-ENT-NAME.
           MOVE PATH-CRE-DATE TO CONVERT-JULIAN-DATE.
           PERFORM DATE-CONVERT.
           MOVE CONVERTED-DATE TO D-CRE-DATE-1.
           MOVE PATH-EXP-DATE TO CONVERT-JULIAN-DATE.
           PERFORM DATE-CONVERT.
           MOVE CONVERTED-DATE TO D-EXP-DATE-1.
           GO TO DECODE-GROUP-OCCURENCES.
       EJECT
      *****************************************************************
      *  SET UP THE WORK FIELDS FOR A USER CATALOG RECORD             *
      *****************************************************************
       DECODE-USERCAT-RECORD.
           MOVE RECORD-ONE TO USERCAT-RECORD.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE USERCAT-DATA-LEN TO BINARY-TWO.
           COMPUTE MAX-REC-LEN = WORK-BINARY + 1.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE USERCAT-FIX-LEN TO BINARY-ONE.
           COMPUTE FIX-REC-LEN = WORK-BINARY + 1.
           MOVE USERCAT-EXT-PTR TO EXT-REC-PTR.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE USERCAT-GRP-PTR-NO TO BINARY-ONE.
           COMPUTE GOP-VAR-NO = WORK-BINARY.
           IF HOLD-INDEX-3 NOT = ZERO
               GO TO DECODE-GROUP-OCCURENCES.
           MOVE 'USC' TO D-ENT-TYPE-1.
           MOVE USERCAT-ENTRY-NAME TO D-ENT-NAME.
           GO TO DECODE-GROUP-OCCURENCES.
       EJECT
      *****************************************************************
      *  SET UP THE WORK FIELDS FOR A VOLUME RECORD                   *
      *****************************************************************
       DECODE-VOLUME-RECORD.
           MOVE RECORD-ONE TO VOLUME-RECORD.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE VOLUME-DATA-LEN TO BINARY-TWO.
           COMPUTE MAX-REC-LEN = WORK-BINARY + 1.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE VOLUME-FIX-LEN TO BINARY-ONE.
           COMPUTE FIX-REC-LEN = WORK-BINARY + 1.
           MOVE VOLUME-EXT-PTR TO EXT-REC-PTR.
           MOVE VOLUME-DEV-FLAG TO WORK-CHAR.
           PERFORM EXPAND-BITS.
           MOVE EXPAND-BYTE TO VOL-DEV-BYTE.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE VOLUME-GRP-PTR-NO TO BINARY-ONE.
           COMPUTE GOP-VAR-NO = WORK-BINARY.
           IF HOLD-INDEX-3 NOT = ZERO
               GO TO DECODE-GROUP-OCCURENCES.
           MOVE 'VOL' TO D-ENT-TYPE-1.
           MOVE VOLUME-ENTRY-NAME TO D-ENT-NAME.
           MOVE ZERO TO DS-NO-EXTNT.
           MOVE ZERO TO DS-NO-TRK.
           MOVE ZERO TO DS-NO-ENT.
           MOVE ZERO TO DS-NO-ENT-TRK.
           MOVE VOLUME-TSTAMP TO WORK-TIMES.
           PERFORM TS-DECODE THROUGH TS-DECODE-EXIT.
           MOVE CONVERTED-DATE TO D-LST-ACC-DATE.
      *    MOVE HEAD-TIME TO D-LST-ACC-TIME.
           GO TO DECODE-GROUP-OCCURENCES.
       EJECT
      *****************************************************************
      *  SET UP THE WORK FIELDS FOR A PATH UPGRADE RECORD             *
      *****************************************************************
       DECODE-UPGRADE-RECORD.
           MOVE RECORD-ONE TO UPGRADE-RECORD.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE UPGRADE-DATA-LEN TO BINARY-TWO.
           COMPUTE MAX-REC-LEN = WORK-BINARY + 1.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE UPGRADE-FIX-LEN TO BINARY-ONE.
           COMPUTE FIX-REC-LEN = WORK-BINARY + 1.
           MOVE UPGRADE-EXT-PTR TO EXT-REC-PTR.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE UPGRADE-GRP-PTR-NO TO BINARY-ONE.
           COMPUTE GOP-VAR-NO = WORK-BINARY.
           IF HOLD-INDEX-3 NOT = ZERO
               GO TO DECODE-GROUP-OCCURENCES.
           MOVE 'UPG' TO D-ENT-TYPE-1.
           GO TO DECODE-GROUP-OCCURENCES.
       EJECT
      *****************************************************************
      *  THE GROUP OCCURENCES ARE VARIABLE IN LENGTH DEPENDING ON     *
      *  WHICH TYPE OF INFORMATION IS USED.  THERE IS A VARABLE       *
      *  NUMBER OF POINTERS WHICH SEQUENTIALLY POINT TO THE STARTING  *
      *  POSITION OF EACH GROUP OCCURENCE.  FIELD GOP-VAR-NO CONTAINS *
      *  THE NUMBER OF GROUP OCCURENCE POINTERS FOR THE RECORD.       *
      *  THESE POINTERS MAY CONTAIN AN OFFSET TO A GROUP OCCURENCE OR *
      *  A RECORD NUMBER TO AN EXTENSION RECORD WHICH CONTAINS THE    *
      *  GROUP OCCURENCE.  EACH POINTER IS NUMBERED IN SEQUENCE BY    *
      *  TYPE AND IS USED TO MATCH THE SEQUENCE OF THE SAME GROUP     *
      *  OCCURENCES FOR THAT RECORD.                                  *
      *****************************************************************
       EJECT
      *****************************************************************
      *  FIND THE STARTING POSITION OF THE GROUP OCCURENCE POINTERS   *
      *****************************************************************
       DECODE-GROUP-OCCURENCES.
           SET A1 TO FIX-REC-LEN.
           SET A1 UP BY 5.
           COMPUTE G-O-START = FIX-REC-LEN + 6 + (GOP-VAR-NO * 5).
           IF REC-TYPE = VOLUME-REC
               COMPUTE G-O-START = FIX-REC-LEN + 6 + (GOP-VAR-NO * 6).
           IF REC-TYPE = VOL-EXT-REC
               COMPUTE G-O-START = FIX-REC-LEN + 6 + (GOP-VAR-NO * 6).
       EJECT
      *****************************************************************
      *  GET READY TO DECODE THE GROUP OCCURENCE POINTER              *
      *****************************************************************
       DECODE-GROUP-POINTER.
           IF GOP-VAR-NO = ZERO
               GO TO CHECK-HOLD-EXT.
           SUBTRACT 1 FROM GOP-VAR-NO.
           MOVE LOW-VALUES TO WORK-ARRAY-TWO.
           SET A2 TO SET-ZERO.
       SKIP1
      *****************************************************************
      *  MOVE THE GROUP OCCURENCE POINTER FOR PROCESSING              *
      *****************************************************************
       MOVE-GOP.
           SET A2 UP BY 1.
           IF A2 GREATER THAN 6
               AND REC-TYPE = VOLUME-REC
               GO TO END-MOVE-GOP.
           IF A2 GREATER THAN 6
               AND REC-TYPE = VOL-EXT-REC
               GO TO END-MOVE-GOP.
           IF A2 GREATER THAN 5
               AND REC-TYPE NOT = VOLUME-REC
               AND REC-TYPE NOT = VOL-EXT-REC
               GO TO END-MOVE-GOP.
           SET A1 UP BY 1.
           IF A1 GREATER THAN MAX-REC-LEN
               DISPLAY 'CATL0011 RECORD LENGTH EXCEEDED ON GROUP'
                   ' OCCURENCE POINTER'
               GO TO END-MOVE-GOP.
           MOVE CHAR-ONE (A1) TO CHAR-TWO (A2).
           GO TO MOVE-GOP.
       SKIP1
      *****************************************************************
      *  MOVE THE WORK ARRAY JUST LOADED TO THE GROUP OCCURENCE       *
      *  POINTER FIELD.  IF GOP-BIT-1 IS ON, THIS IS A DELETED GROUP  *
      *  OCCURENCE AND WILL BE BYPASSED.                              *
      *****************************************************************
       END-MOVE-GOP.
           MOVE WORK-ARRAY-TWO TO GOP-VOL-EXTEND.
           MOVE GOP-REC-ATTR TO WORK-CHAR.
           PERFORM EXPAND-BITS.
           MOVE EXPAND-BYTE TO GOP-ATTR-BYTE.
           IF GOP-DELETED = '1'
               GO TO DECODE-GROUP-POINTER.
       EJECT
      *****************************************************************
      *  FIND OUT WHICH TYPE OF GROUP OCCURENCE POINTER THIS IS AND   *
      *  ALSO CHECK THE SEQUENCE NUMBER OF THE POINTER TO MATCH THE   *
      *  ONE BEING PROCESSED IF IT IS CONTAINED ON AN EXTENSION       *
      *  RECORD.                                                      *
      *****************************************************************
       DECODE-GOP-POINTER.
           MOVE LOW-VALUES TO BINARY-WORK.
           IF REC-TYPE NOT = VOLUME-REC
               AND REC-TYPE NOT = VOL-EXT-REC
               MOVE GOP-REC-SEQ TO BINARY-ONE.
           IF REC-TYPE = VOLUME-REC
               MOVE GOP-VOL-SEQ TO BINARY-TWO.
           IF REC-TYPE = VOL-EXT-REC
               MOVE GOP-VOL-SEQ TO BINARY-TWO.
           COMPUTE G-O-SEQ = WORK-BINARY.
           MOVE ZERO TO GOP-TYPE.
           IF GOP-BIT-0 = '1'
               ADD 1 TO GOP-TYPE.
           IF GOP-BIT-1 = '1'
               ADD 2 TO GOP-TYPE.
           IF GOP-BIT-2 = '1'
               ADD 4 TO GOP-TYPE.
           IF GOP-BIT-3 = '1'
               ADD 8 TO GOP-TYPE.
           IF G-O-SEQ-EXT = ZERO
               GO TO CHECK-VXT-SEQ.
           IF GOP-TYPE NOT = GOP-TYPE-EXT
               GO TO DECODE-GROUP-POINTER.
           IF G-O-SEQ GREATER THAN G-O-SEQ-EXT
               GO TO CHECK-HOLD-EXT.
           IF G-O-SEQ NOT = G-O-SEQ-EXT
               GO TO DECODE-GROUP-POINTER.
           GO TO PROCESS-GOP.
       SKIP1
      *****************************************************************
      *  CHECK THE SEQUENCE NUMBER OF THE POINTER IF A VOLUME         *
      *  EXTENSION RECORD IS BEING PROCESSED.                         *
      *****************************************************************
       CHECK-VXT-SEQ.
           IF HOLD-INDEX-3 NOT = ZERO
               GO TO PROCESS-GOP.
           IF G-O-SEQ-VOL-EXT = ZERO
               GO TO PROCESS-GOP.
           IF GOP-TYPE NOT = GOP-TYPE-VOL-EXT
               GO TO DECODE-GROUP-POINTER.
           IF G-O-SEQ GREATER THAN G-O-SEQ-VOL-EXT
               GO TO CHECK-VXT-RECORD.
           IF G-O-SEQ NOT = G-O-SEQ-VOL-EXT
               GO TO DECODE-GROUP-POINTER.
       EJECT
      *****************************************************************
      *  IF GOP-REC-EXT IS OFF THE GROUP OCCURENCE IS IN THE RECORD   *
      *  BEING PROCESSED, OTHERWISE AN EXTENSION RECORD MUST BE READ  *
      *****************************************************************
       PROCESS-GOP.
           IF GOP-REC-EXT NOT = '1'
               GO TO MOVE-GROUP-OCCURENCE.
           IF REC-TYPE = VOLUME-REC
               GO TO GET-VOL-EXT.
           IF REC-TYPE = VOL-EXT-REC
               GO TO GET-VOL-EXT.
           IF HOLD-INDEX-2 NOT = ZERO
               DISPLAY 'CATL0012 EXTENSION RECORD REQUESTED '
                       'ON EXTENSION RECORD'
               GO TO DECODE-GROUP-POINTER.
           SET HOLD-INDEX-2 TO A1.
           MOVE GOP-VAR-NO TO GOP-VAR-NO-2.
           MOVE G-O-START TO G-O-START-2.
           MOVE G-O-SEQ TO G-O-SEQ-2.
           MOVE G-O-SEQ TO G-O-SEQ-EXT.
           MOVE GOP-TYPE TO GOP-TYPE-2.
           MOVE GOP-TYPE TO GOP-TYPE-EXT.
           MOVE FIX-REC-LEN TO FIX-REC-LEN-2.
           MOVE MAX-REC-LEN TO MAX-REC-LEN-2.
           MOVE REC-TYPE TO REC-TYPE-2.
           MOVE EXT-REC-PTR TO EXT-REC-PTR-2.
           MOVE WORK-ARRAY-ONE TO HOLD-RECORD-2.
      *    MOVE GOP-EXT-CI TO RECORD-NUMBER.
           GO TO CHECK-EXT-HERE.
       SKIP1
      *****************************************************************
      *  A VOLUME EXTENSION RECORD MUST BE READ                       *
      *****************************************************************
       GET-VOL-EXT.
           IF HOLD-INDEX-4 NOT = ZERO
               DISPLAY 'CATL0013 VOLUME EXTENSION RECORD REQUESTED ON'
                       ' VOLUME EXTENSION RECORD'
               GO TO DECODE-GROUP-POINTER.
           SET HOLD-INDEX-4 TO A1.
           MOVE GOP-VAR-NO TO GOP-VAR-NO-4.
           MOVE G-O-START TO G-O-START-4.
           MOVE G-O-SEQ TO G-O-SEQ-4.
           MOVE G-O-SEQ TO G-O-SEQ-VOL-EXT.
           MOVE GOP-TYPE TO GOP-TYPE-4.
           MOVE GOP-TYPE TO GOP-TYPE-VOL-EXT.
           MOVE FIX-REC-LEN TO FIX-REC-LEN-4.
           MOVE MAX-REC-LEN TO MAX-REC-LEN-4.
           MOVE REC-TYPE TO REC-TYPE-4.
           MOVE EXT-REC-PTR TO EXT-REC-PTR-4.
           MOVE WORK-ARRAY-ONE TO HOLD-RECORD-4.
      *    MOVE GOP-EXT-CI TO RECORD-NUMBER.
       SKIP1
      *****************************************************************
      *  CHECK THE POSSIBILITY OF THE EXTENSION RECORD ALREADY BEING  *
      *  IN STORAGE.  MAY NOT HAVE TO DO THE READ IF IT IS.           *
      *****************************************************************
       CHECK-EXT-HERE.
           IF EXT-CI NOT = GOP-EXT-CI
               MOVE GOP-EXT-CI TO EXT-CI
               MOVE GOP-EXT-CI TO EXT-REC-NO
               GO TO READ-EXT-RECORD.
           MOVE EXTEND-RECORD TO RECORD-ONE.
           GO TO PROCESS-REC.
       EJECT
      *****************************************************************
      *  MOVE THE ARRAY INDEX POINTER TO THE BEGINNING OF THE GROUP   *
      *  OCCURENCE                                                    *
      *****************************************************************
       MOVE-GROUP-OCCURENCE.
           SET HOLD-INDEX TO A1.
           SET A1 TO G-O-START.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE GOP-REC-DISP TO BINARY-TWO.
           SET A1 UP BY WORK-BINARY.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE CHAR-ONE (A1) TO BINARY-ONE.
           COMPUTE G-O-NO-VAR-FLD = WORK-BINARY.
           SET A1 UP BY 1.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE CHAR-ONE (A1) TO BINARY-ONE.
           COMPUTE G-O-LEN = WORK-BINARY.
           SET A2 TO SET-ZERO.
           SET A1 DOWN BY 2.
           MOVE LOW-VALUES TO WORK-ARRAY-TWO.
       SKIP1
      *****************************************************************
      *  MOVE THE GROUP OCCURENCE INFORMATION TO THE WORK ARRAY       *
      *****************************************************************
       MOVE-G-O-LOOP.
           SET A2 UP BY 1.
           IF A2 GREATER THAN G-O-LEN
               GO TO END-MOVE-G-O-LOOP.
           SET A1 UP BY 1.
           IF A1 GREATER THAN MAX-REC-LEN
               DISPLAY 'CATL0014 RECORD LENGTH EXCEEDED ON GROUP'
                   ' OCCURENCE MOVE'
               GO TO END-MOVE-G-O-LOOP.
           MOVE CHAR-ONE (A1) TO CHAR-TWO (A2).
           GO TO MOVE-G-O-LOOP.
       SKIP1
      *****************************************************************
      *  CHECK FOR VARIABLE FIELDS IN THE GROUP OCCURENCE.  IF SO,    *
      *  FIND THEIR LENGTH AND MOVE THEM                              *
      *****************************************************************
       END-MOVE-G-O-LOOP.
           IF G-O-NO-VAR-FLD = ZERO
               GO TO LOAD-G-O-TYPE.
           SUBTRACT 1 FROM G-O-NO-VAR-FLD.
           SET A1 UP BY 1.
           IF A1 GREATER THAN MAX-REC-LEN
               DISPLAY 'CATL0015 RECORD LENGTH EXCEEDED ON GROUP'
                   ' OCCURENCE VARIABLE FIELD'
               GO TO END-MOVE-G-O-LOOP.
           MOVE CHAR-ONE (A1) TO BYTE-ONE.
           MOVE CHAR-ONE (A1) TO CHAR-TWO (A2).
           SET A1 UP BY 1.
           SET A2 UP BY 1.
           MOVE CHAR-ONE (A1) TO BYTE-TWO.
           MOVE CHAR-ONE (A1) TO CHAR-TWO (A2).
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE TWO-BYTES TO BINARY-TWO.
           COMPUTE G-O-LEN = G-O-LEN + 2.
           IF WORK-BINARY = ZERO
               SET A2 UP BY 1
               GO TO END-MOVE-G-O-LOOP.
           COMPUTE G-O-LEN = G-O-LEN + WORK-BINARY.
           GO TO MOVE-G-O-LOOP.
       EJECT
      *****************************************************************
      *  FIND WHICH TYPE OF GROUP OCCURENCE WAS JUST MOVED            *
      *****************************************************************
       LOAD-G-O-TYPE.
           SET A1 TO HOLD-INDEX.
           IF GOP-TYPE NOT = VOLUME-TYPE
               AND REC-TYPE NOT = CLUSTER-REC
               AND HOLD-INDEX-3 NOT = ZERO
               GO TO DECODE-GROUP-POINTER.
           IF GOP-TYPE = AMDSB-TYPE
               GO TO DECODE-AMDSB-OCCURENCE.
           IF GOP-TYPE = ASSOCIATION-TYPE
               GO TO DECODE-ASSOC-OCCURENCE.
           IF GOP-TYPE = VOLUME-TYPE
               GO TO DECODE-VOLUME-OCCURENCE.
           IF GOP-TYPE = PASSWD-TYPE
               GO TO DECODE-PASSWORD-OCCURENCE.
           IF GOP-TYPE = SPACE-MAP-TYPE
               GO TO DECODE-SPACE-MAP-OCCURENCE.
           IF GOP-TYPE = DATA-SPACE-TYPE
               GO TO DECODE-DATA-SPACE-OCCURENCE.
           IF GOP-TYPE = DATA-DIR-TYPE
               GO TO DECODE-DIRECTORY-OCCURENCE.
           GO TO DECODE-GROUP-POINTER.
       EJECT
      *****************************************************************
      *  THE NEXT SECTIONS FORMAT THE GROUP OCCURENCES FOR PROCESSING *
      *  AND EXPANSION.  SOME OF THE GROUP OCCURENCES HAVE OPTIONAL   *
      *  VARIABLE LENGTH FIELDS WHICH MUST ALSO BE FORMATTED.         *
      *****************************************************************
       EJECT
      *****************************************************************
      *  DECODE THE ACCESS METHOD DATA SERVICES BLOCK OCCURENCE       *
      *****************************************************************
       DECODE-AMDSB-OCCURENCE.
           MOVE WORK-ARRAY-TWO TO AMDSB-OCCURENCE.
           MOVE AMDATTR TO WORK-CHAR.
           PERFORM EXPAND-BITS.
           MOVE EXPAND-BYTE TO AMDSB-ATTR-BYTE.
           MOVE AMDRCFRM TO WORK-CHAR.
           PERFORM EXPAND-BITS.
           MOVE EXPAND-BYTE TO AMDSB-RECFM-BYTE.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE AMDKEYLN TO BINARY-TWO.
           MOVE WORK-BINARY TO PRINT-NUMBER.
           MOVE PRINT-NUMBER TO D-KEY-LEN.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE AMDRKP TO BINARY-TWO.
           MOVE WORK-BINARY TO PRINT-NUMBER.
           MOVE PRINT-NUMBER TO D-KEY-POS.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE AMDCINV TO BINARY-FOUR.
           MOVE WORK-BINARY TO PRINT-NUMBER.
           MOVE PRINT-NUMBER TO D-CI-SIZE.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE AMDLRECL TO BINARY-FOUR.
           MOVE WORK-BINARY TO PRINT-NUMBER.
           MOVE PRINT-NUMBER TO D-MAX-SIZE.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE AMDNEXT TO BINARY-TWO.
           MOVE WORK-BINARY TO PRINT-NUMBER.
           MOVE PRINT-NUMBER TO D-NUM-EXT.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE AMDNLR TO BINARY-FOUR.
           MOVE WORK-BINARY TO PRINT-NUMBER.
           MOVE PRINT-NUMBER TO D-NUM-REC.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE AMDNCIS TO BINARY-FOUR.
           MOVE WORK-BINARY TO PRINT-NUMBER.
           MOVE PRINT-NUMBER TO D-CI-SPLIT.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE AMDNCAS TO BINARY-FOUR.
           MOVE WORK-BINARY TO PRINT-NUMBER.
           MOVE PRINT-NUMBER TO D-CA-SPLIT.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE AMDPCTCI TO BINARY-ONE.
           MOVE WORK-BINARY TO PRINT-NUMBER.
           IF AM-KSDS-FILE = '1'
               MOVE PRINT-NUMBER TO D-CI-FSPC.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE AMDPCTCA TO BINARY-ONE.
           MOVE WORK-BINARY TO PRINT-NUMBER.
           IF AM-KSDS-FILE = '1'
               MOVE PRINT-NUMBER TO D-CA-FSPC.
           MOVE AMDSTMST TO WORK-TIMES.
           PERFORM TS-DECODE THROUGH TS-DECODE-EXIT.
           MOVE CONVERTED-DATE TO D-LST-ACC-DATE.
      *    MOVE HEAD-TIME TO D-LST-ACC-TIME.
           GO TO DECODE-GROUP-POINTER.
       EJECT
      *****************************************************************
      *  DECODE THE CATALOG RECORD ASSOCIATION OCCURENCE.  ALSO       *
      *  PREPARE TO READ THE ASSOCIATED COMPONENT CATALOG RECORD.     *
      *****************************************************************
       DECODE-ASSOC-OCCURENCE.
           MOVE WORK-ARRAY-TWO TO ASSOC-OCCURENCE.
           IF HOLD-INDEX-1 NOT = ZERO
               GO TO DECODE-GROUP-POINTER.
           SET HOLD-INDEX-1 TO A1.
           MOVE GOP-VAR-NO TO GOP-VAR-NO-1.
           MOVE G-O-START TO G-O-START-1.
           MOVE G-O-SEQ TO G-O-SEQ-1.
           MOVE GOP-TYPE TO GOP-TYPE-1.
           MOVE FIX-REC-LEN TO FIX-REC-LEN-1.
           MOVE MAX-REC-LEN TO MAX-REC-LEN-1.
           MOVE REC-TYPE TO REC-TYPE-1.
           MOVE EXT-REC-PTR TO EXT-REC-PTR-1.
           MOVE WORK-ARRAY-ONE TO HOLD-RECORD-1.
      *    MOVE ASSOC-CI-NO TO RECORD-NUMBER.
           MOVE ASSOC-CI-NO TO EXT-REC-NO.
           IF HOLD-INDEX-3 = ZERO
               PERFORM WRITE-LINE.
           GO TO READ-EXT-RECORD.
       EJECT
      *****************************************************************
      *  DECODE THE VOLUME EXTENT AND LOCATION INFORMATION OCCURENCE  *
      *****************************************************************
       DECODE-VOLUME-OCCURENCE.
           SET A2 TO 2.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE CHAR-TWO (A2) TO BINARY-ONE.
           SET A2 TO WORK-BINARY.
           IF WORK-BINARY LESS THAN 39
               GO TO CHECK-LKEY-RANGE.
           MOVE WORK-ARRAY-TWO TO VOLUME-OCCURENCE.
           MOVE ZERO TO VOL-NO-TRK.
           MOVE VOL-FLAG TO WORK-CHAR.
           PERFORM EXPAND-BITS.
           MOVE EXPAND-BYTE TO VOL-FLAG-BYTE.
           MOVE VOL-ITYPEXT TO WORK-CHAR.
           PERFORM EXPAND-BITS.
           MOVE EXPAND-BYTE TO VOL-ITYP-BYTE.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE VOL-NOEXTNT TO BINARY-ONE.
           MOVE WORK-BINARY TO VOL-NO-EXTNT.
           IF VOL-IX-SEQ-SET-IMBED = '1'
               GO TO DECODE-GROUP-POINTER.
           IF HOLD-INDEX-3 NOT = ZERO
               AND VOL-SERNO NOT = D-ENT-VOL
               GO TO DECODE-GROUP-POINTER.
           IF HOLD-INDEX-3 NOT = ZERO
               GO TO CHECK-LKEY-RANGE.
           IF D-ENT-VOL NOT = SPACE
               AND D-ENT-VOL NOT = VOL-SERNO
               PERFORM WRITE-LINE.
           MOVE VOL-SERNO TO D-ENT-VOL.
           MOVE VOL-NO-EXTNT TO PRINT-NUMBER.
           MOVE PRINT-NUMBER TO D-NUM-EXT.
       SKIP1
      *****************************************************************
      *  CHECK TO SEE IF THERE IS A LOW KEY RANGE ON THIS VOLUME      *
      *****************************************************************
       CHECK-LKEY-RANGE.
           SET A2 UP BY 1.
           MOVE CHAR-TWO (A2) TO BYTE-ONE.
           SET A2 UP BY 1.
           MOVE CHAR-TWO (A2) TO BYTE-TWO.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE TWO-BYTES TO BINARY-TWO.
           COMPUTE LKEY-LEN = WORK-BINARY.
           IF LKEY-LEN = ZERO
               GO TO CHECK-HKEY-RANGE.
           SET LK TO SET-ZERO.
           MOVE LOW-VALUES TO VOL-LKEY-ARRAY.
       SKIP1
      *****************************************************************
      *  MOVE THE LOW KEY RANGE INFORMATION FOR PROCESSING            *
      *****************************************************************
       MOVE-LKEY-RANGE-LOOP.
           SET LK UP BY 1.
           IF LK GREATER THAN LKEY-LEN
               GO TO END-LKEY-RANGE-LOOP.
           SET A2 UP BY 1.
           MOVE CHAR-TWO (A2) TO LKEY-CHAR (LK).
           GO TO MOVE-LKEY-RANGE-LOOP.
       END-LKEY-RANGE-LOOP.
       SKIP1
      *****************************************************************
      *  CHECK TO SEE IF THERE IS A HIGH KEY RANGE ON THIS VOLUME     *
      *****************************************************************
       CHECK-HKEY-RANGE.
           SET A2 UP BY 1.
           MOVE CHAR-TWO (A2) TO BYTE-ONE.
           SET A2 UP BY 1.
           MOVE CHAR-TWO (A2) TO BYTE-TWO.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE TWO-BYTES TO BINARY-TWO.
           COMPUTE HKEY-LEN = WORK-BINARY.
           IF HKEY-LEN = ZERO
               GO TO CHECK-EXTENTS.
           SET HK TO SET-ZERO.
           MOVE LOW-VALUES TO VOL-HKEY-ARRAY.
       SKIP1
      *****************************************************************
      *  MOVE THE HIGH KEY RANGE INFORMATION FOR PROCESSING           *
      *****************************************************************
       MOVE-HKEY-RANGE-LOOP.
           SET HK UP BY 1.
           IF HK GREATER THAN HKEY-LEN
               GO TO END-HKEY-RANGE-LOOP.
           SET A2 UP BY 1.
           MOVE CHAR-TWO (A2) TO HKEY-CHAR (HK).
           GO TO MOVE-HKEY-RANGE-LOOP.
       END-HKEY-RANGE-LOOP.
       SKIP1
      *****************************************************************
      *  CHECK FOR AN EXTENT ON THIS VOLUME                           *
      *****************************************************************
       CHECK-EXTENTS.
           SET A2 UP BY 1.
           MOVE CHAR-TWO (A2) TO BYTE-ONE.
           SET A2 UP BY 1.
           MOVE CHAR-TWO (A2) TO BYTE-TWO.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE TWO-BYTES TO BINARY-TWO.
           COMPUTE EXTENT-LEN = WORK-BINARY.
           IF EXTENT-LEN = ZERO
               GO TO END-EXTENTS.
           IF EX GREATER THAN 1
               AND EX LESS THAN 21
               GO TO MOVE-EXTENTS-LOOP.
           SET EX TO SET-ZERO.
           MOVE LOW-VALUES TO VOL-EXTENT-ARRAY.
       SKIP1
      *****************************************************************
      *  MOVE THE EXTENT INFORMATION                                  *
      *****************************************************************
       MOVE-EXTENTS-LOOP.
           SET EX UP BY 1.
           IF EX GREATER THAN 20
               GO TO END-CURR-EXT.
           SUBTRACT 1 FROM EXTENT-LEN.
           IF EXTENT-LEN LESS THAN ZERO
               SET EX DOWN BY 1
               GO TO END-EXTENTS.
           SET A2 UP BY 1.
           MOVE CHAR-TWO (A2) TO EXTENT-CHAR (EX).
           GO TO MOVE-EXTENTS-LOOP.
       SKIP1
      *****************************************************************
      *  TOTAL THE NUMBER OF TRACKS FOR THIS EXTENT AND GET THE NEXT  *
      *  EXTENT INFORMATION FOR THIS VOLUME                           *
      *****************************************************************
       END-CURR-EXT.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE VOL-NO-TRACKS TO BINARY-TWO.
           COMPUTE VOL-NO-TRK = VOL-NO-TRK + WORK-BINARY.
           MOVE VOL-NO-TRK TO PRINT-NUMBER.
           MOVE PRINT-NUMBER TO D-NUM-TRK.
           SET EX TO SET-ZERO.
           MOVE LOW-VALUES TO VOL-EXTENT-ARRAY.
           SUBTRACT 1 FROM VOL-NO-EXTNT.
           GO TO MOVE-EXTENTS-LOOP.
       SKIP1
      *****************************************************************
      *  CHECK FOR EXTENT INFORMATION ON AN EXTENSION RECORD.  IF NOT *
      *  CHECK TO SEE IF A VOLUME DATA SET DIRECTORY SEARCH IS BEING  *
      *  DONE AND COMPUTE THE VOLUME DATA SPACE ALLOCATION PERCENTAGE *
      *****************************************************************
       END-EXTENTS.
           IF VOL-NO-EXTNT GREATER THAN ZERO
               GO TO CHECK-G-O-EXT-RECORD.
           IF HOLD-INDEX-3 = ZERO
               PERFORM WRITE-LINE
               GO TO DECODE-GROUP-POINTER.
           COMPUTE DS-NO-ENT-TRK = DS-NO-ENT-TRK + VOL-NO-TRK.
           MOVE DS-NO-ENT-TRK TO PRINT-NUMBER.
           MOVE PRINT-NUMBER TO D-NUM-TRK.
           MOVE ZERO TO PCT-FULL.
           IF DS-NO-TRK NOT = ZERO
               DIVIDE DS-NO-ENT-TRK BY DS-NO-TRK GIVING PCT-FULL.
           MOVE FULL-PCT TO PRINT-NUMBER.
           MOVE PRINT-NUMBER TO D-PCT-FULL.
           GO TO DECODE-GROUP-POINTER.
       EJECT
      *****************************************************************
      *  DECODE THE PASSWORD INFORMATION OCCURENCE                    *
      *****************************************************************
       DECODE-PASSWORD-OCCURENCE.
           MOVE WORK-ARRAY-TWO TO PASSWORD-OCCURENCE.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE PASSWRD-LEN TO BINARY-ONE.
           SET A2 TO WORK-BINARY.
       SKIP1
      *****************************************************************
      *  CHECK TO SEE IF THERE IS ANY USER VARIABLE INFORMATION ON    *
      *  THE PASSWORD OCCURENCE                                       *
      *****************************************************************
       CHECK-PASSWRD-RANGE.
           SET A2 UP BY 1.
           MOVE CHAR-TWO (A2) TO BYTE-ONE.
           SET A2 UP BY 1.
           MOVE CHAR-TWO (A2) TO BYTE-TWO.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE TWO-BYTES TO BINARY-TWO.
           COMPUTE PASSWORD-LEN = WORK-BINARY.
           IF PASSWRD-LEN = ZERO
               GO TO END-PASSWRD-RANGE-LOOP.
           SET P TO SET-ZERO.
           MOVE LOW-VALUES TO PASSWRD-USER-ARRAY.
       SKIP1
      *****************************************************************
      *  MOVE THE USER VARIABLE INFORMATION                           *
      *****************************************************************
       MOVE-PASSWRD-RANGE-LOOP.
           SET P UP BY 1.
           IF P GREATER THAN PASSWORD-LEN
               GO TO END-PASSWRD-RANGE-LOOP.
           SET A2 UP BY 1.
           MOVE CHAR-TWO (A2) TO PASSWRD-CHAR (P).
           GO TO MOVE-PASSWRD-RANGE-LOOP.
       SKIP1
       END-PASSWRD-RANGE-LOOP.
           GO TO DECODE-GROUP-POINTER.
       EJECT
      *****************************************************************
      *  DECODE THE VOLUME SPACE MAP OCCURENCE                        *
      *****************************************************************
       DECODE-SPACE-MAP-OCCURENCE.
           MOVE WORK-ARRAY-TWO TO SPACE-MAP-OCCURENCE.
           GO TO DECODE-GROUP-POINTER.
       EJECT
      *****************************************************************
      *  DECODE THE DATA SPACE EXTENT INFORMATION OCCURENCE           *
      *****************************************************************
       DECODE-DATA-SPACE-OCCURENCE.
           MOVE WORK-ARRAY-TWO TO DATA-SPACE-OCCURENCE.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE DS-NO-EXT TO BINARY-ONE.
           COMPUTE DS-NO-EXTNT = DS-NO-EXTNT + WORK-BINARY.
           MOVE DS-NO-EXTNT TO PRINT-NUMBER.
           MOVE PRINT-NUMBER TO D-NUM-EXT.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE DS-SEC-ALL TO BINARY-THREE.
           COMPUTE PRINT-NUMBER = WORK-BINARY.
           MOVE PRINT-NUMBER TO D-SEC-ALLOC.
           MOVE VOLUME-ENTRY-NAME TO D-ENT-VOL.
           MOVE DS-FLAGS TO WORK-CHAR.
           PERFORM EXPAND-BITS.
           MOVE EXPAND-BYTE TO DS-FLAG-BYTE.
           MOVE DS-ALL-OPTS TO WORK-CHAR.
           PERFORM EXPAND-BITS.
           MOVE EXPAND-BYTE TO DS-SPCOPT-BYTE.
           IF DS-SPC-TRK-ALLOC = '1'
               AND DS-SPC-CYL-ALLOC = '1'
               MOVE 'CYL' TO D-ALLOC-TYPE.
           IF DS-SPC-TRK-ALLOC = '1'
               AND DS-SPC-CYL-ALLOC = '0'
               MOVE 'TRK' TO D-ALLOC-TYPE.
           MOVE ZERO TO D-SPC-CLS.
           IF DS-SPC-CLS-1 = '1'
               ADD 1 TO D-SPC-CLS.
           IF DS-SPC-CLS-2 = '1'
               ADD 2 TO D-SPC-CLS.
           IF DS-SPC-CLS-3 = '1'
               ADD 4 TO D-SPC-CLS.
           MOVE DS-LBL-TSTMP TO WORK-TIMES.
           PERFORM TS-DECODE THROUGH TS-DECODE-EXIT.
           SET D TO SET-ZERO.
       SKIP1
      *****************************************************************
      *  TOTAL THE DATA SPACE EXTENT SIZES FOR THE VOLUME             *
      *****************************************************************
       ACCUM-EXT-LOOP.
           SET D UP BY 1.
           IF D GREATER THAN 16
               GO TO END-ACCUM-EXT-LOOP.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE DS-NN (D) TO BINARY-TWO.
           COMPUTE DS-NO-TRK = DS-NO-TRK + WORK-BINARY.
           GO TO ACCUM-EXT-LOOP.
       SKIP1
      *****************************************************************
      *  FIND THE PERCENTAGE OF THE VOLUME THAT IS CONTROLLED BY VSAM *
      *****************************************************************
       END-ACCUM-EXT-LOOP.
           MOVE DS-NO-TRK TO PRINT-NUMBER.
           MOVE LOW-VALUES TO BINARY-WORK.
           MOVE VOLUME-CYL-TRK TO BINARY-TWO.
           IF DS-SPC-TRK-ALLOC = '1'
               AND DS-SPC-CYL-ALLOC = '1'
               DIVIDE DS-NO-TRK BY WORK-BINARY GIVING PRINT-NUMBER.
           MOVE PRINT-NUMBER TO D-PR-ALLOC.
           MOVE ZERO TO PCT-FULL.
           IF DS-NO-TRK NOT = ZERO
               DIVIDE DS-NO-ENT-TRK BY DS-NO-TRK GIVING PCT-FULL.
           MOVE FULL-PCT TO PRINT-NUMBER.
           MOVE PRINT-NUMBER TO D-PCT-FULL.
           GO TO DECODE-GROUP-POINTER.
       EJECT
      *****************************************************************
      *  DECODE THE DATA SPACE DATA SET DIRECTORY OCCURENCE.  ALSO    *
      *  PREPARE TO READ THE COMPONENT RECORD FOR THE EXTENT          *
      *  ALLOCATION INFORMATION                                       *
      *****************************************************************
       DECODE-DIRECTORY-OCCURENCE.
           MOVE WORK-ARRAY-TWO TO DIRECTORY-OCCURENCE.
           IF HOLD-INDEX-3 NOT = ZERO
               GO TO DECODE-GROUP-POINTER.
           COMPUTE DS-NO-ENT = DS-NO-ENT + 1.
           SET HOLD-INDEX-3 TO A1.
           MOVE GOP-VAR-NO TO GOP-VAR-NO-3.
           MOVE G-O-START TO G-O-START-3.
           MOVE G-O-SEQ TO G-O-SEQ-3.
           MOVE GOP-TYPE TO GOP-TYPE-3.
           MOVE FIX-REC-LEN TO FIX-REC-LEN-3.
           MOVE MAX-REC-LEN TO MAX-REC-LEN-3.
           MOVE REC-TYPE TO REC-TYPE-3.
           MOVE EXT-REC-PTR TO EXT-REC-PTR-3.
           MOVE WORK-ARRAY-ONE TO HOLD-RECORD-3.
      *    MOVE DIR-DS-CI-NO TO RECORD-NUMBER.
           MOVE DIR-DS-CI-NO TO EXT-REC-NO.
           GO TO READ-EXT-RECORD.
       EJECT
      *****************************************************************
      *  CHECK FOR AN EXTENSION RECORD WHICH MUST BE PROCESSED        *
      *****************************************************************
       CHECK-G-O-EXT-RECORD.
           MOVE EXT-REC-PTR TO EXTEND-REC-PTR.
           IF EXTEND-REC-CI = LOW-VALUES
               GO TO CHECK-HOLD-EXT.
      *    MOVE EXTEND-REC-CI TO RECORD-NUMBER.
           MOVE EXTEND-REC-CI TO EXT-REC-NO.
           GO TO READ-EXT-RECORD.
       SKIP1
      *****************************************************************
      *  CHECK FOR A RECORD ON HOLD FROM AN EXTENSION RECORD          *
      *****************************************************************
       CHECK-HOLD-EXT.
           IF HOLD-INDEX-2 = ZERO
               GO TO CHECK-HOLD-ASSOC.
           MOVE REC-TYPE-2 TO REC-TYPE.
           MOVE EXT-REC-PTR-2 TO EXT-REC-PTR.
           MOVE G-O-START-2 TO G-O-START.
           MOVE G-O-SEQ-2 TO G-O-SEQ.
           MOVE GOP-TYPE-2 TO GOP-TYPE.
           MOVE FIX-REC-LEN-2 TO FIX-REC-LEN.
           MOVE MAX-REC-LEN-2 TO MAX-REC-LEN.
           MOVE GOP-VAR-NO-2 TO GOP-VAR-NO.
           MOVE HOLD-RECORD-2 TO WORK-ARRAY-ONE.
           SET A1 TO HOLD-INDEX-2.
           MOVE ZERO TO GOP-TYPE-2.
           MOVE ZERO TO FIX-REC-LEN-2.
           MOVE ZERO TO MAX-REC-LEN-2.
           MOVE ZERO TO GOP-VAR-NO-2.
           MOVE ZERO TO G-O-START-2.
           MOVE ZERO TO G-O-SEQ-2.
           MOVE ZERO TO HOLD-INDEX-2.
           MOVE LOW-VALUES TO REC-TYPE-2.
           MOVE LOW-VALUES TO EXT-REC-PTR-2.
           MOVE ZERO TO G-O-SEQ-EXT.
           GO TO DECODE-GROUP-POINTER.
       SKIP1
      *****************************************************************
      *  CHECK FOR A RECORD ON HOLD FROM AN ASSOCIATION RECORD        *
      *****************************************************************
       CHECK-HOLD-ASSOC.
           IF HOLD-INDEX-1 = ZERO
               GO TO CHECK-DS-DIR-LEFT.
           MOVE REC-TYPE-1 TO REC-TYPE.
           MOVE EXT-REC-PTR-1 TO EXT-REC-PTR.
           MOVE G-O-START-1 TO G-O-START.
           MOVE G-O-SEQ-1 TO G-O-SEQ.
           MOVE GOP-TYPE-1 TO GOP-TYPE.
           MOVE FIX-REC-LEN-1 TO FIX-REC-LEN.
           MOVE MAX-REC-LEN-1 TO MAX-REC-LEN.
           MOVE GOP-VAR-NO-1 TO GOP-VAR-NO.
           MOVE HOLD-RECORD-1 TO WORK-ARRAY-ONE.
           SET A1 TO HOLD-INDEX-1.
           IF HOLD-INDEX-3 = ZERO
               PERFORM WRITE-LINE.
           MOVE ZERO TO GOP-TYPE-1.
           MOVE ZERO TO FIX-REC-LEN-1.
           MOVE ZERO TO MAX-REC-LEN-1.
           MOVE ZERO TO GOP-VAR-NO-1.
           MOVE ZERO TO G-O-START-1.
           MOVE ZERO TO G-O-SEQ-1.
           MOVE ZERO TO HOLD-INDEX-1.
           MOVE LOW-VALUES TO REC-TYPE-1.
           MOVE LOW-VALUES TO EXT-REC-PTR-1.
           GO TO DECODE-GROUP-POINTER.
       SKIP1
      *****************************************************************
      *  CHECK FOR A RECORD ON HOLD FROM A DATASET DIRECTORY RECORD   *
      *****************************************************************
       CHECK-DS-DIR-LEFT.
           IF HOLD-INDEX-3 = ZERO
               GO TO CHECK-VXT-RECORD.
           MOVE REC-TYPE-3 TO REC-TYPE.
           MOVE EXT-REC-PTR-3 TO EXT-REC-PTR.
           MOVE G-O-START-3 TO G-O-START.
           MOVE G-O-SEQ-3 TO G-O-SEQ.
           MOVE GOP-TYPE-3 TO GOP-TYPE.
           MOVE FIX-REC-LEN-3 TO FIX-REC-LEN.
           MOVE MAX-REC-LEN-3 TO MAX-REC-LEN.
           MOVE GOP-VAR-NO-3 TO GOP-VAR-NO.
           MOVE HOLD-RECORD-3 TO WORK-ARRAY-ONE.
           SET A1 TO HOLD-INDEX-3.
           MOVE ZERO TO GOP-TYPE-3.
           MOVE ZERO TO FIX-REC-LEN-3.
           MOVE ZERO TO MAX-REC-LEN-3.
           MOVE ZERO TO GOP-VAR-NO-3.
           MOVE ZERO TO G-O-START-3.
           MOVE ZERO TO G-O-SEQ-3.
           MOVE ZERO TO HOLD-INDEX-3.
           MOVE LOW-VALUES TO REC-TYPE-3.
           MOVE LOW-VALUES TO EXT-REC-PTR-3.
           GO TO DECODE-GROUP-POINTER.
       SKIP1
      *****************************************************************
      *  CHECK FOR A RECORD ON HOLD FROM A VOLUME EXTENSION RECORD    *
      *****************************************************************
       CHECK-VXT-RECORD.
           IF HOLD-INDEX-4 = ZERO
               GO TO CHECK-EXT-RECORD.
           MOVE REC-TYPE-4 TO REC-TYPE.
           MOVE EXT-REC-PTR-4 TO EXT-REC-PTR.
           MOVE G-O-START-4 TO G-O-START.
           MOVE G-O-SEQ-4 TO G-O-SEQ.
           MOVE GOP-TYPE-4 TO GOP-TYPE.
           MOVE FIX-REC-LEN-4 TO FIX-REC-LEN.
           MOVE MAX-REC-LEN-4 TO MAX-REC-LEN.
           MOVE GOP-VAR-NO-4 TO GOP-VAR-NO.
           MOVE HOLD-RECORD-4 TO WORK-ARRAY-ONE.
           SET A1 TO HOLD-INDEX-4.
           MOVE ZERO TO GOP-TYPE-4.
           MOVE ZERO TO FIX-REC-LEN-4.
           MOVE ZERO TO MAX-REC-LEN-4.
           MOVE ZERO TO GOP-VAR-NO-4.
           MOVE ZERO TO G-O-START-4.
           MOVE ZERO TO G-O-SEQ-4.
           MOVE ZERO TO HOLD-INDEX-4.
           MOVE LOW-VALUES TO REC-TYPE-4.
           MOVE LOW-VALUES TO EXT-REC-PTR-4.
           MOVE ZERO TO G-O-SEQ-VOL-EXT.
           GO TO DECODE-GROUP-POINTER.
       SKIP1
      *****************************************************************
      *   CHECK TO SEE IF THE RECORD IS CONTINUED ON AN EXTENSION     *
      *   RECORD.  IF SO, GO READ AND PROCESS THE EXTENSION RECORD.   *
      *****************************************************************
       CHECK-EXT-RECORD.
           IF EXT-REC-PTR = LOW-VALUES
               GO TO READ-NEXT-RECORD.
           MOVE EXT-REC-PTR TO EXTEND-REC-PTR.
           MOVE EXTEND-REC-CI TO EXT-CI-REC.
      *    MOVE EXTEND-REC-CI TO RECORD-NUMBER.
           MOVE EXTEND-REC-CI TO EXT-REC-NO.
           GO TO READ-EXT-RECORD.
       EJECT
      *****************************************************************
      *  CLOSE THE VSAM CATALOG FILE AND END THE PROCESSING.          *
      *****************************************************************
       FINISH-JOB.
           CLOSE FILE-ONE, PRINT-FILE.
           IF VSAM-BYTE NOT = '00'
               DISPLAY 'CATL0016 CLOSE ERROR ' VSAM-BYTE
                   ' ON VSAM CATALOG -- JOB CANCELED' UPON CONSOLE
               DIVIDE X BY Y GIVING Z.
           STOP RUN.
