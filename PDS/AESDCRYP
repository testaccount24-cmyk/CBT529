      **************************
       IDENTIFICATION DIVISION.
       PROGRAM-ID. AESDCRYP.
      *****************************************************************
      *  PARAMETERS FOR THIS ROUTINE:                                 *
      *  INPUT CRYPTO KEY   ==> 64 BYTE data  -- PIC X(64)            *
      *  INPUT DATA LENGTH  ==> 2 BYTE BINARY -- PIC S9(4)  COMP      *
      *  INPUT DATA         ==> MAXIMUM 96    -- PIC X                *
      *  OUTPUT DATA LENGTH ==> 2 BYTE BINARY -- PIC S9(4)  COMP      *
      *  OUTPUT DATA        ==> MAXIMUM 96    -- PIC X                *
      *  ERROR CODE         ==> 2 BYTE BINARY -- PIC S9(4)  COMP      *
      *  ERROR MESSAGE      ==> 100 CHARACTER -- PIC X(100)           *
      *****************************************************************
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER. IBM-370.
       OBJECT-COMPUTER. IBM-370.
      *****************************************************************
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT KEY-FILE  ASSIGN TO CRYPKEY
               ORGANIZATION IS INDEXED
               ACCESS IS SEQUENTIAL
               RECORD KEY IS CRY-KEY
               FILE STATUS IS CRY-CHECK.
       DATA DIVISION.
       FILE SECTION.
       FD  KEY-FILE
           LABEL RECORD IS STANDARD
           BLOCK CONTAINS 0 RECORDS.
       01  FILE-KEY.
           05  CRY-KEY                PIC X(64).
           05  CRYPT-KEY              PIC X(16).
       WORKING-STORAGE SECTION.
      *****************************************************************
      *  BEGINNING OF THE DATA AREAS LAYOUT                           *
      *****************************************************************
       77  WS-START                    PIC X(36) VALUE
           'AESDCRYP WORKING STORAGE STARTS HERE'.
       77  KEY-FORM PIC X(16) VALUE LOW-VALUES.
       77  CRY-CHECK PIC X(02) VALUE LOW-VALUES.
      *****************************************************************
      *  GENERAL WORK FIELDS AND ACCUMULATORS                         *
      *****************************************************************
       01 CIPHER-PROCESSING-RULES.
           02  ALG-OR-ITHM        PIC X(08)  VALUE 'AES     '.
           02  PROCESS-ING        PIC X(08)  VALUE 'CBC     '.
           02  KEY-RULE           PIC X(08)  VALUE 'KEY-CLR '.
           02  ICV-SELECTION      PIC X(08)  VALUE 'INITIAL '.
      ************* DEFINE SAPI INPUT/OUTPUT PARAMETERS ************
       01 SAPI-REC.
           05 RETURN-CODE-S PIC 9(08) COMP.
           05 REASON-CODE-S PIC 9(08) COMP.
           05 BLOCK-LENGTH-S PIC 9(08) COMP.
           05 EXIT-DATA-LENGTH-S PIC 9(08) COMP.
           05 EXIT-DATA-S PIC X(16).
           05 KEY-IDENT-S PIC X(16).
           05 KEY-LENGTH-S PIC 9(08) COMP.
           05 KEY-PARM-S PIC X(16).
           05 KEY-PARM-LENGTH-S PIC 9(08) COMP.
           05 TEXT-LENGTH-S PIC 9(08) COMP.
           05 TEXT-S PIC X(4096).
           05 CPHR-TEXT-LENGTH-S PIC 9(08) COMP.
           05 CPHR-TEXT-S PIC X(4096).
           05 RULE-ARRAY-COUNT-S PIC 9(08) COMP.
           05 RULE-ARRAY-S.
               10 RULE-ARRAY PIC X(32).
           05 CHAINING-DATA-LENGTH-S PIC 9(08) COMP.
           05 CHAINING-DATA-S PIC X(64).
           05 INITIAL-VECTOR-LENGTH-S PIC 9(08) COMP.
           05 INITIAL-VECTOR-S PIC X(18).
           05 OPT-LENGTH-S PIC 9(08) COMP.
           05 OPT-S PIC X(24).
       LINKAGE SECTION.
       01 INPUT-KEY-REQUEST PIC X(64).
       01 INPUT-TEXT PIC X(96).
       01 INPUT-TEXT-LENGTH PIC S9(4) COMP.
       01 OUTPUT-TEXT-LENGTH PIC S9(4) COMP.
       01 OUTPUT-TEXT PIC X(96).
       01 RET-CODE           PIC S9(4) COMP.
       01 RET-MSG            PIC X(100).
      *****************************************************************
       PROCEDURE DIVISION USING INPUT-KEY-REQUEST
                                INPUT-TEXT-LENGTH
                                INPUT-TEXT
                                OUTPUT-TEXT-LENGTH
                                OUTPUT-TEXT
                                RET-CODE
                                RET-MSG.
           OPEN INPUT KEY-FILE.
           IF CRY-CHECK NOT = ZERO
               DISPLAY '*** OPEN ERROR ' CRY-CHECK ' ***'
               MOVE '*** DECIPHER OPEN UNSUCCESSFULL ***' TO RET-MSG
               MOVE 8 TO RET-CODE
               GO TO PROGRAM-RETURN.
           MOVE INPUT-KEY-REQUEST TO CRY-KEY.
           READ KEY-FILE.
           IF CRY-CHECK NOT = ZERO
               DISPLAY '*** READ ERROR ' CRY-CHECK ' ***'
               MOVE '*** DECIPHER READ UNSUCCESSFULL ***' TO RET-MSG
               MOVE 8 TO RET-CODE
               GO TO PROGRAM-RETURN.
           MOVE CRYPT-KEY TO KEY-FORM.
           CLOSE KEY-FILE.
           IF CRY-CHECK NOT = ZERO
               DISPLAY '*** CLOSE ERROR ' CRY-CHECK ' ***'
               MOVE '*** DECIPHER CLOSE UNSUCCESSFULL ***' TO RET-MSG
               MOVE 8 TO RET-CODE
               GO TO PROGRAM-RETURN.
      *****************************************************************
      *  CHECK TO SEE IF THE INPUT DATA LENGTH IS WITHIN RANGE        *
      *****************************************************************
       CHECK-ITXT-RANGE.
           IF INPUT-TEXT-LENGTH = ZERO
               MOVE 4 TO RET-CODE
               MOVE 'NO LENGTH GIVEN FOR INPUT STRING' TO RET-MSG
               GO TO PROGRAM-RETURN.
      *    IF INPUT-TEXT-LENGTH > 96
      *        MOVE 4 TO RET-CODE
      *        MOVE 'EXCESS LENGTH GIVEN FOR INPUT STRING' TO RET-MSG
      *        GO TO PROGRAM-RETURN.
       MAIN-RTN.
      ************* INITALIZE PARAMETERS ************************
           MOVE 0 TO EXIT-DATA-LENGTH-S.
           MOVE 0 TO KEY-PARM-LENGTH-S.
           MOVE 16 TO INITIAL-VECTOR-LENGTH-S.
           MOVE 64 TO CHAINING-DATA-LENGTH-S.
           MOVE 0 TO OPT-LENGTH-S.
           MOVE KEY-FORM TO KEY-IDENT-S.
           MOVE 16 TO KEY-LENGTH-S.
           MOVE 4096 TO TEXT-LENGTH-S.
           MOVE INPUT-TEXT TO CPHR-TEXT-S.
           MOVE INPUT-TEXT-LENGTH TO CPHR-TEXT-LENGTH-S.
           MOVE 4096 TO CPHR-TEXT-LENGTH-S.
           MOVE 4 TO RULE-ARRAY-COUNT-S.
           MOVE 16 TO BLOCK-LENGTH-S.
           MOVE CIPHER-PROCESSING-RULES TO RULE-ARRAY-S.
           MOVE LOW-VALUES TO CHAINING-DATA-S.
           MOVE LOW-VALUES TO INITIAL-VECTOR-S.
           MOVE LOW-VALUES TO KEY-PARM-S.
           MOVE LOW-VALUES TO OPT-S.
       DEC-DATA.
      ************* CALL DECIPHER ************************************
           CALL 'CSNBSYD' USING RETURN-CODE-S
                               REASON-CODE-S
                               EXIT-DATA-LENGTH-S
                               EXIT-DATA-S
                               RULE-ARRAY-COUNT-S
                               RULE-ARRAY-S
                               KEY-LENGTH-S
                               KEY-IDENT-S
                               KEY-PARM-LENGTH-S
                               KEY-PARM-S
                               BLOCK-LENGTH-S
                               INITIAL-VECTOR-LENGTH-S
                               INITIAL-VECTOR-S
                               CHAINING-DATA-LENGTH-S
                               CHAINING-DATA-S
                               CPHR-TEXT-LENGTH-S
                               CPHR-TEXT-S
                               TEXT-LENGTH-S
                               TEXT-S
                               OPT-LENGTH-S
                               OPT-S.
           MOVE RETURN-CODE-S TO RET-CODE.
           MOVE '*** DECIPHER SUCCESSFULL ***' TO RET-MSG.
           DISPLAY RET-MSG.
           IF RETURN-CODE-S NOT = 0 OR
               REASON-CODE-S NOT = 0 THEN
               DISPLAY '*** REASON-CODE = ' REASON-CODE-S
               MOVE '*** DECIPHER UNSUCCESSFULL ***' TO RET-MSG
               GO TO PROGRAM-RETURN.
           MOVE TEXT-S TO OUTPUT-TEXT.
           MOVE TEXT-LENGTH-S TO OUTPUT-TEXT-LENGTH.
       PROGRAM-RETURN.
           GOBACK.
